{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\autoForm\\autoForm.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/components/autoForm/autoForm.js","filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\autoForm\\autoForm.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","root":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","generatorOpts":{"filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\autoForm\\autoForm.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/autoForm/autoForm.js"}},"code":"var MongoObject;\nmodule.watch(require(\"mongo-object\"), {\n  \"default\": function (v) {\n    MongoObject = v;\n  }\n}, 0);\n\n/* global AutoForm, ReactiveVar, arrayTracker, Hooks, Utility, setDefaults */\nTemplate.autoForm.helpers({\n  atts: function () {\n    function autoFormTplAtts() {\n      // After removing all of the props we know about, everything else should\n      // become a form attribute unless it's an array or object.\n      var val,\n          htmlAttributes = {},\n          context = this;\n      var removeProps = [\"schema\", \"collection\", \"validation\", \"doc\", \"resetOnSuccess\", \"type\", \"template\", \"autosave\", \"autosaveOnKeyup\", \"meteormethod\", \"filter\", \"autoConvert\", \"removeEmptyStrings\", \"trimStrings\"]; // Filter out any attributes that have a component prefix\n\n      function hasComponentPrefix(prop) {\n        return _.any(Utility.componentTypeList, function (componentType) {\n          return prop.indexOf(componentType + '-') === 0;\n        });\n      } // Filter out arrays and objects, which are obviously not meant to be\n      // HTML attributes.\n\n\n      for (var prop in meteorBabelHelpers.sanitizeForInObject(context)) {\n        if (context.hasOwnProperty(prop) && !_.contains(removeProps, prop) && !hasComponentPrefix(prop)) {\n          val = context[prop];\n\n          if (!_.isArray(val) && !_.isObject(val)) {\n            htmlAttributes[prop] = val;\n          }\n        }\n      } // By default, we add the `novalidate=\"novalidate\"` attribute to our form,\n      // unless the user passes `validation=\"browser\"`.\n\n\n      if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {\n        htmlAttributes.novalidate = \"novalidate\";\n      }\n\n      return htmlAttributes;\n    }\n\n    return autoFormTplAtts;\n  }(),\n  afDestroyUpdateForm: function (formId) {\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);\n    return AutoForm._destroyForm[formId].get();\n  }\n});\n\nTemplate.autoForm.created = function () {\n  function autoFormCreated() {\n    var template = this; // We'll add tracker dependencies for reactive field values\n    // to this object as necessary\n\n    template.formValues = template.formValues || {}; // We'll store \"sticky\" errors here. These are errors added\n    // manually based on server validation, which we don't want to\n    // be wiped out by further client validation.\n\n    template._stickyErrors = {};\n    template.autorun(function (c) {\n      var data = Template.currentData(); // rerun when current data changes\n\n      var formId = data.id;\n\n      if (!formId) {\n        throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');\n      } // When we change the form, loading a different doc, reloading the current doc, etc.,\n      // we also want to reset the array counts for the form\n\n\n      arrayTracker.resetForm(formId);\n      data = setDefaults(data); // Clone the doc so that docToForm and other modifications do not change\n      // the original referenced object.\n\n      var doc = data.doc ? EJSON.clone(data.doc) : null; // Update cached form values for hot code reload persistence\n\n      if (data.preserveForm === false) {\n        AutoForm.formPreserve.unregisterForm(formId);\n      } else {\n        // Even if we have already registered, we reregister to ensure that the\n        // closure values of template, formId, and ss remain correct after each\n        // reaction\n        AutoForm.formPreserve.registerForm(formId, function () {\n          function autoFormRegFormCallback() {\n            return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);\n          }\n\n          return autoFormRegFormCallback;\n        }());\n      } // Retain doc values after a \"hot code push\", if possible\n\n\n      if (c.firstRun) {\n        var retrievedDoc = AutoForm.formPreserve.getDocument(formId);\n\n        if (retrievedDoc !== false) {\n          // Ensure we keep the _id property which may not be present in retrievedDoc.\n          doc = _.extend(doc || {}, retrievedDoc || {});\n        }\n      }\n\n      var mDoc;\n\n      if (doc && !_.isEmpty(doc)) {\n        var hookCtx = {\n          formId: formId\n        }; // Pass doc through docToForm hooks\n\n        _.each(Hooks.getHooks(formId, 'docToForm'), function () {\n          function autoFormEachDocToForm(hook) {\n            doc = hook.call(hookCtx, doc, data._resolvedSchema);\n\n            if (!doc) {\n              throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n            }\n          }\n\n          return autoFormEachDocToForm;\n        }()); // Create a \"flat doc\" that can be used to easily get values for corresponding\n        // form fields.\n\n\n        mDoc = new MongoObject(doc);\n        AutoForm.reactiveFormData.sourceDoc(formId, mDoc);\n      } else {\n        AutoForm.reactiveFormData.sourceDoc(formId, null);\n      }\n    });\n  }\n\n  return autoFormCreated;\n}();\n\nTemplate.autoForm.rendered = function () {\n  function autoFormRendered() {\n    var lastId;\n    this.autorun(function () {\n      var data = Template.currentData(); // rerun when current data changes\n\n      if (data.id === lastId) return;\n      lastId = data.id;\n      AutoForm.triggerFormRenderedDestroyedReruns(data.id);\n    });\n  }\n\n  return autoFormRendered;\n}();\n\nTemplate.autoForm.destroyed = function () {\n  function autoFormDestroyed() {\n    var self = this;\n    var formId = self.data.id; // TODO if formId was changing reactively during life of instance,\n    // some data won't be removed by the calls below.\n    // Remove from array fields list\n\n    arrayTracker.untrackForm(formId); // Unregister form preservation\n\n    AutoForm.formPreserve.unregisterForm(formId); // Trigger value reruns\n\n    AutoForm.triggerFormRenderedDestroyedReruns(formId);\n  }\n\n  return autoFormDestroyed;\n}();","map":{"version":3,"sources":["packages/aldeed:autoform/components/autoForm/autoForm.js"],"names":["MongoObject","module","watch","require","v","Template","autoForm","helpers","atts","autoFormTplAtts","val","htmlAttributes","context","removeProps","hasComponentPrefix","prop","_","any","Utility","componentTypeList","componentType","indexOf","hasOwnProperty","contains","isArray","isObject","validation","novalidate","afDestroyUpdateForm","formId","AutoForm","_destroyForm","ReactiveVar","get","created","autoFormCreated","template","formValues","_stickyErrors","autorun","c","data","currentData","id","Error","arrayTracker","resetForm","setDefaults","doc","EJSON","clone","preserveForm","formPreserve","unregisterForm","registerForm","autoFormRegFormCallback","getFormValues","_resolvedSchema","firstRun","retrievedDoc","getDocument","extend","mDoc","isEmpty","hookCtx","each","Hooks","getHooks","autoFormEachDocToForm","hook","call","reactiveFormData","sourceDoc","rendered","autoFormRendered","lastId","triggerFormRenderedDestroyedReruns","destroyed","autoFormDestroyed","self","untrackForm"],"mappings":"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","sourcesContent":["import MongoObject from 'mongo-object';\n\n/* global AutoForm, ReactiveVar, arrayTracker, Hooks, Utility, setDefaults */\n\nTemplate.autoForm.helpers({\n  atts: function autoFormTplAtts() {\n    // After removing all of the props we know about, everything else should\n    // become a form attribute unless it's an array or object.\n    var val, htmlAttributes = {}, context = this;\n    var removeProps = [\n      \"schema\",\n      \"collection\",\n      \"validation\",\n      \"doc\",\n      \"resetOnSuccess\",\n      \"type\",\n      \"template\",\n      \"autosave\",\n      \"autosaveOnKeyup\",\n      \"meteormethod\",\n      \"filter\",\n      \"autoConvert\",\n      \"removeEmptyStrings\",\n      \"trimStrings\"\n    ];\n\n    // Filter out any attributes that have a component prefix\n    function hasComponentPrefix(prop) {\n      return _.any(Utility.componentTypeList, function (componentType) {\n        return prop.indexOf(componentType + '-') === 0;\n      });\n    }\n\n    // Filter out arrays and objects, which are obviously not meant to be\n    // HTML attributes.\n    for (var prop in context) {\n      if (context.hasOwnProperty(prop) &&\n          !_.contains(removeProps, prop) &&\n          !hasComponentPrefix(prop)) {\n        val = context[prop];\n        if (!_.isArray(val) && !_.isObject(val)) {\n          htmlAttributes[prop] = val;\n        }\n      }\n    }\n\n    // By default, we add the `novalidate=\"novalidate\"` attribute to our form,\n    // unless the user passes `validation=\"browser\"`.\n    if (this.validation !== \"browser\" && !htmlAttributes.novalidate) {\n      htmlAttributes.novalidate = \"novalidate\";\n    }\n\n    return htmlAttributes;\n  },\n  afDestroyUpdateForm: function (formId) {\n    AutoForm._destroyForm[formId] = AutoForm._destroyForm[formId] || new ReactiveVar(false);\n    return AutoForm._destroyForm[formId].get();\n  }\n});\n\nTemplate.autoForm.created = function autoFormCreated() {\n  var template = this;\n\n  // We'll add tracker dependencies for reactive field values\n  // to this object as necessary\n  template.formValues = template.formValues || {};\n\n  // We'll store \"sticky\" errors here. These are errors added\n  // manually based on server validation, which we don't want to\n  // be wiped out by further client validation.\n  template._stickyErrors = {};\n\n  template.autorun(function (c) {\n    var data = Template.currentData(); // rerun when current data changes\n    var formId = data.id;\n\n    if (!formId) {\n      throw new Error('Every autoForm and quickForm must have an \"id\" attribute set to a unique string.');\n    }\n\n    // When we change the form, loading a different doc, reloading the current doc, etc.,\n    // we also want to reset the array counts for the form\n    arrayTracker.resetForm(formId);\n\n    data = setDefaults(data);\n\n    // Clone the doc so that docToForm and other modifications do not change\n    // the original referenced object.\n    var doc = data.doc ? EJSON.clone(data.doc) : null;\n\n    // Update cached form values for hot code reload persistence\n    if (data.preserveForm === false) {\n      AutoForm.formPreserve.unregisterForm(formId);\n    } else {\n      // Even if we have already registered, we reregister to ensure that the\n      // closure values of template, formId, and ss remain correct after each\n      // reaction\n      AutoForm.formPreserve.registerForm(formId, function autoFormRegFormCallback() {\n        return AutoForm.getFormValues(formId, template, data._resolvedSchema, false);\n      });\n    }\n\n    // Retain doc values after a \"hot code push\", if possible\n    if (c.firstRun) {\n      var retrievedDoc = AutoForm.formPreserve.getDocument(formId);\n      if (retrievedDoc !== false) {\n        // Ensure we keep the _id property which may not be present in retrievedDoc.\n        doc = _.extend(doc || {}, retrievedDoc || {});\n      }\n    }\n\n    var mDoc;\n    if (doc && !_.isEmpty(doc)) {\n      var hookCtx = {formId: formId};\n      // Pass doc through docToForm hooks\n      _.each(Hooks.getHooks(formId, 'docToForm'), function autoFormEachDocToForm(hook) {\n        doc = hook.call(hookCtx, doc, data._resolvedSchema);\n        if (!doc) {\n          throw new Error('Oops! Did you forget to return the modified document from your docToForm hook for the ' + formId + ' form?');\n        }\n      });\n\n      // Create a \"flat doc\" that can be used to easily get values for corresponding\n      // form fields.\n      mDoc = new MongoObject(doc);\n      AutoForm.reactiveFormData.sourceDoc(formId, mDoc);\n    } else {\n      AutoForm.reactiveFormData.sourceDoc(formId, null);\n    }\n  });\n};\n\nTemplate.autoForm.rendered = function autoFormRendered() {\n  var lastId;\n  this.autorun(function () {\n    var data = Template.currentData(); // rerun when current data changes\n\n    if (data.id === lastId) return;\n    lastId = data.id;\n\n    AutoForm.triggerFormRenderedDestroyedReruns(data.id);\n  });\n};\n\nTemplate.autoForm.destroyed = function autoFormDestroyed() {\n  var self = this;\n  var formId = self.data.id;\n\n  // TODO if formId was changing reactively during life of instance,\n  // some data won't be removed by the calls below.\n\n  // Remove from array fields list\n  arrayTracker.untrackForm(formId);\n\n  // Unregister form preservation\n  AutoForm.formPreserve.unregisterForm(formId);\n\n  // Trigger value reruns\n  AutoForm.triggerFormRenderedDestroyedReruns(formId);\n};\n"]},"sourceType":"script","hash":"a8ef657342923b47aea8ca27c61921b55259b64e"}
