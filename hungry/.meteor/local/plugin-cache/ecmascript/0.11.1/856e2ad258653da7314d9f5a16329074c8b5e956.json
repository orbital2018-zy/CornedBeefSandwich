{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\afFieldInput\\afFieldInput.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/components/afFieldInput/afFieldInput.js","filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\afFieldInput\\afFieldInput.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","root":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","generatorOpts":{"filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\components\\afFieldInput\\afFieldInput.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/afFieldInput/afFieldInput.js"}},"code":"/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */\nTemplate.afFieldInput.helpers({\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back\n  // lastly to a template without an _ piece at the end\n  getTemplateName: function () {\n    function getTemplateName() {\n      var self = this; // Determine what `type` attribute should be if not set\n\n      var inputType = AutoForm.getInputType(this);\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];\n\n      if (!componentDef) {\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n      }\n\n      var inputTemplateName = componentDef.template;\n      var styleTemplateName = this.template; // We skip the check for existence here so that we can get the `_plain` string\n      // even though they don't exist.\n\n      var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true); // Special case: the built-in \"plain\" template uses the basic input templates for\n      // everything, so if we found _plain, we use inputTemplateName instead\n\n      if (templateName.indexOf('_plain') !== -1) {\n        templateName = null;\n      } // If no override templateName found, use the exact name from the input type definition\n\n\n      if (!templateName || !Template[templateName]) {\n        templateName = inputTemplateName;\n      }\n\n      return templateName;\n    }\n\n    return getTemplateName;\n  }(),\n  innerContext: function () {\n    function afFieldInputContext() {\n      var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");\n      var form = AutoForm.getCurrentDataForForm();\n      var formId = form.id;\n      var ss = AutoForm.getFormSchema();\n      var defs = c.defs; // Get schema default value.\n      // We must do this before adjusting defs for arrays.\n\n      var schemaDefaultValue = defs.defaultValue; // Adjust for array fields if necessary\n\n      if (defs.type === Array) {\n        defs = AutoForm.Utility.getFieldDefinition(ss, c.atts.name + \".$\");\n      } // Determine what `type` attribute should be if not set\n\n\n      var inputType = AutoForm.getInputType(this);\n      var componentDef = AutoForm._inputTypeDefinitions[inputType];\n\n      if (!componentDef) {\n        throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n      } // Get reactive mDoc\n\n\n      var mDoc = AutoForm.reactiveFormData.sourceDoc(formId); // Get input value\n\n      var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef); // Mark field value as changed for reactive updates\n      // We need to defer this until the element will be\n      // added to the DOM. Otherwise, AutoForm.getFieldValue\n      // will not pick up the new value when there are #if etc.\n      // blocks involved.\n      // See https://github.com/aldeed/meteor-autoform/issues/461\n\n      var template = AutoForm.templateInstanceForForm();\n\n      if (template.view.isRendered) {\n        // No need to do this on first run because we'll rerun the value functions\n        // once the form is rendered anyway\n        updateTrackedFieldValue(template, c.atts.name);\n      } // Build input data context\n\n\n      var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type); // Adjust and return context\n\n      return typeof componentDef.contextAdjust === \"function\" ? componentDef.contextAdjust(iData) : iData;\n    }\n\n    return afFieldInputContext;\n  }()\n});","map":{"version":3,"sources":["packages/aldeed:autoform/components/afFieldInput/afFieldInput.js"],"names":["Template","afFieldInput","helpers","getTemplateName","self","inputType","AutoForm","getInputType","componentDef","_inputTypeDefinitions","Error","inputTemplateName","template","styleTemplateName","templateName","name","indexOf","innerContext","afFieldInputContext","c","Utility","getComponentContext","form","getCurrentDataForForm","formId","id","ss","getFormSchema","defs","schemaDefaultValue","defaultValue","type","Array","getFieldDefinition","atts","mDoc","reactiveFormData","sourceDoc","value","getInputValue","templateInstanceForForm","view","isRendered","updateTrackedFieldValue","iData","getInputData","label","contextAdjust"],"mappings":"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","sourcesContent":["/* global AutoForm, getInputValue, getInputData, updateTrackedFieldValue */\n\nTemplate.afFieldInput.helpers({\n  // similar to AutoForm.getTemplateName, but we have fewer layers of fallback, and we fall back\n  // lastly to a template without an _ piece at the end\n  getTemplateName: function getTemplateName() {\n    var self = this;\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    var inputTemplateName = componentDef.template;\n    var styleTemplateName = this.template;\n\n    // We skip the check for existence here so that we can get the `_plain` string\n    // even though they don't exist.\n    var templateName = AutoForm.getTemplateName(inputTemplateName, styleTemplateName, self.name, true);\n\n    // Special case: the built-in \"plain\" template uses the basic input templates for\n    // everything, so if we found _plain, we use inputTemplateName instead\n    if (templateName.indexOf('_plain') !== -1) {\n      templateName = null;\n    }\n\n    // If no override templateName found, use the exact name from the input type definition\n    if (!templateName || !Template[templateName]) {\n      templateName = inputTemplateName;\n    }\n\n    return templateName;\n  },\n  innerContext: function afFieldInputContext() {\n    var c = AutoForm.Utility.getComponentContext(this, \"afFieldInput\");\n    var form = AutoForm.getCurrentDataForForm();\n    var formId = form.id;\n    var ss = AutoForm.getFormSchema();\n    var defs = c.defs;\n\n    // Get schema default value.\n    // We must do this before adjusting defs for arrays.\n    var schemaDefaultValue = defs.defaultValue;\n\n    // Adjust for array fields if necessary\n    if (defs.type === Array) {\n      defs = AutoForm.Utility.getFieldDefinition(ss, c.atts.name + \".$\");\n    }\n\n    // Determine what `type` attribute should be if not set\n    var inputType = AutoForm.getInputType(this);\n    var componentDef = AutoForm._inputTypeDefinitions[inputType];\n    if (!componentDef) {\n      throw new Error('AutoForm: No component found for rendering input with type \"' + inputType + '\"');\n    }\n\n    // Get reactive mDoc\n    var mDoc = AutoForm.reactiveFormData.sourceDoc(formId);\n\n    // Get input value\n    var value = getInputValue(c.atts, c.atts.value, mDoc, schemaDefaultValue, c.atts.defaultValue, componentDef);\n\n    // Mark field value as changed for reactive updates\n    // We need to defer this until the element will be\n    // added to the DOM. Otherwise, AutoForm.getFieldValue\n    // will not pick up the new value when there are #if etc.\n    // blocks involved.\n    // See https://github.com/aldeed/meteor-autoform/issues/461\n    var template = AutoForm.templateInstanceForForm();\n    if (template.view.isRendered) {\n      // No need to do this on first run because we'll rerun the value functions\n      // once the form is rendered anyway\n      updateTrackedFieldValue(template, c.atts.name);\n    }\n\n    // Build input data context\n    var iData = getInputData(defs, c.atts, value, ss.label(c.atts.name), form.type);\n\n    // Adjust and return context\n    return (typeof componentDef.contextAdjust === \"function\") ? componentDef.contextAdjust(iData) : iData;\n  }\n});\n"]},"sourceType":"script","hash":"856e2ad258653da7314d9f5a16329074c8b5e956"}
