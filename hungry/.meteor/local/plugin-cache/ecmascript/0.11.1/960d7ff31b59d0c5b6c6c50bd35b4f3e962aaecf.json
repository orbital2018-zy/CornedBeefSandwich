{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\components\\afFormGroup\\afFormGroup.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/components/afFormGroup/afFormGroup.js","filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\components\\afFormGroup\\afFormGroup.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry","root":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry","generatorOpts":{"filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\components\\afFormGroup\\afFormGroup.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/components/afFormGroup/afFormGroup.js"}},"code":"/* global AutoForm */\nTemplate.afFormGroup.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);\n  },\n  innerContext: function () {\n    function afFormGroupContext() {\n      var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');\n      var afFormGroupAtts = formGroupAtts(c.atts);\n      var afFieldLabelAtts = formGroupLabelAtts(c.atts);\n      var afFieldInputAtts = formGroupInputAtts(c.atts); // Construct an `id` attribute for the input, optionally\n      // adding a user-provided prefix. Since id attribute is\n      // supposed to be unique in the DOM and templates can be\n      // included multiple times, it's best not to provide an `id`\n      // and generate a random one here for accessibility reasons.\n\n      var id = c.atts.id || Random.id();\n      var idPrefix = c.atts['id-prefix'];\n\n      if (idPrefix && idPrefix.length > 0) {\n        id = idPrefix + '-' + id;\n      } // Set the input's `id` attribute and the label's `for` attribute to\n      // the same ID.\n      // NOTE: `afFieldLabelAtts.for` causes exception in IE8\n\n\n      afFieldLabelAtts['for'] = afFieldInputAtts.id = id; // Get the field's schema definition\n\n      var fieldSchema = AutoForm.getSchemaForField(c.atts.name);\n      return {\n        skipLabel: c.atts.label === false,\n        afFormGroupClass: c.atts['formgroup-class'],\n        afFormGroupAtts: afFormGroupAtts,\n        afFieldLabelAtts: afFieldLabelAtts,\n        afFieldInputAtts: afFieldInputAtts,\n        name: c.atts.name,\n        required: fieldSchema ? !fieldSchema.optional : false,\n        labelText: typeof c.atts.label === 'string' ? c.atts.label : null\n      };\n    }\n\n    return afFormGroupContext;\n  }()\n});\n/*\n * Private\n */\n\nfunction formGroupAtts(atts) {\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'\n  var labelAtts = {};\n\n  _.each(atts, function () {\n    function autoFormLabelAttsEach(val, key) {\n      if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {\n        labelAtts[key.substring(10)] = val;\n      }\n    }\n\n    return autoFormLabelAttsEach;\n  }());\n\n  return labelAtts;\n}\n\nfunction formGroupLabelAtts(atts) {\n  // Separate label options from input options; label items begin with 'label-'\n  var labelAtts = {};\n\n  _.each(atts, function () {\n    function autoFormLabelAttsEach(val, key) {\n      if (key.indexOf('label-') === 0) {\n        labelAtts[key.substring(6)] = val;\n      }\n    }\n\n    return autoFormLabelAttsEach;\n  }());\n\n  return labelAtts;\n}\n\nfunction formGroupInputAtts(atts) {\n  // Separate input options from label and formgroup options\n  // We also don't want the 'label' option\n  var inputAtts = {};\n\n  _.each(atts, function () {\n    function autoFormLabelAttsEach(val, key) {\n      if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n        inputAtts[key] = val;\n      }\n    }\n\n    return autoFormLabelAttsEach;\n  }());\n\n  return inputAtts;\n}","map":{"version":3,"sources":["packages/aldeed:autoform/components/afFormGroup/afFormGroup.js"],"names":["Template","afFormGroup","helpers","getTemplateName","AutoForm","template","name","innerContext","afFormGroupContext","c","Utility","getComponentContext","afFormGroupAtts","formGroupAtts","atts","afFieldLabelAtts","formGroupLabelAtts","afFieldInputAtts","formGroupInputAtts","id","Random","idPrefix","length","fieldSchema","getSchemaForField","skipLabel","label","afFormGroupClass","required","optional","labelText","labelAtts","_","each","autoFormLabelAttsEach","val","key","indexOf","substring","inputAtts"],"mappings":"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","sourcesContent":["/* global AutoForm */\n\nTemplate.afFormGroup.helpers({\n  getTemplateName: function () {\n    return AutoForm.getTemplateName('afFormGroup', this.template, this.name);\n  },\n  innerContext: function afFormGroupContext() {\n    var c = AutoForm.Utility.getComponentContext(this, 'afFormGroup');\n    var afFormGroupAtts = formGroupAtts(c.atts);\n    var afFieldLabelAtts = formGroupLabelAtts(c.atts);\n    var afFieldInputAtts = formGroupInputAtts(c.atts);\n\n    // Construct an `id` attribute for the input, optionally\n    // adding a user-provided prefix. Since id attribute is\n    // supposed to be unique in the DOM and templates can be\n    // included multiple times, it's best not to provide an `id`\n    // and generate a random one here for accessibility reasons.\n    var id = c.atts.id || Random.id();\n    var idPrefix = c.atts['id-prefix'];\n    if (idPrefix && idPrefix.length > 0) {\n      id = idPrefix + '-' + id;\n    }\n\n    // Set the input's `id` attribute and the label's `for` attribute to\n    // the same ID.\n    // NOTE: `afFieldLabelAtts.for` causes exception in IE8\n    afFieldLabelAtts['for'] = afFieldInputAtts.id = id;\n\n    // Get the field's schema definition\n    var fieldSchema = AutoForm.getSchemaForField(c.atts.name);\n\n    return {\n      skipLabel: (c.atts.label === false),\n      afFormGroupClass: c.atts['formgroup-class'],\n      afFormGroupAtts: afFormGroupAtts,\n      afFieldLabelAtts: afFieldLabelAtts,\n      afFieldInputAtts: afFieldInputAtts,\n      name: c.atts.name,\n      required: fieldSchema ? !fieldSchema.optional : false,\n      labelText: (typeof c.atts.label === 'string') ? c.atts.label : null\n    };\n  }\n});\n\n/*\n * Private\n */\n\nfunction formGroupAtts(atts) {\n  // Separate formgroup options from input options; formgroup items begin with 'formgroup-'\n  var labelAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (key.indexOf('formgroup-') === 0 && key != 'formgroup-class') {\n      labelAtts[key.substring(10)] = val;\n    }\n  });\n  return labelAtts;\n}\n\nfunction formGroupLabelAtts(atts) {\n  // Separate label options from input options; label items begin with 'label-'\n  var labelAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (key.indexOf('label-') === 0) {\n      labelAtts[key.substring(6)] = val;\n    }\n  });\n  return labelAtts;\n}\n\nfunction formGroupInputAtts(atts) {\n  // Separate input options from label and formgroup options\n  // We also don't want the 'label' option\n  var inputAtts = {};\n  _.each(atts, function autoFormLabelAttsEach(val, key) {\n    if (['id-prefix', 'id', 'label'].indexOf(key) === -1 && key.indexOf('label-') !== 0 && key.indexOf('formgroup-') !== 0) {\n      inputAtts[key] = val;\n    }\n  });\n  return inputAtts;\n}\n"]},"sourceType":"script","hash":"960d7ff31b59d0c5b6c6c50bd35b4f3e962aaecf"}
