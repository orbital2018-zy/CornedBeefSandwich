{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\autoform-arrays.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/autoform-arrays.js","filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\autoform-arrays.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","root":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry","generatorOpts":{"filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungrymine\\hungry\\packages\\aldeed:autoform\\autoform-arrays.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/autoform-arrays.js"}},"code":"// Track arrays; this allows us to add/remove fields or groups of fields for an array\n// but still easily respect minCount and maxCount, and properly add/remove the same\n// items from the database once the form is submitted.\nArrayTracker = function () {\n  function afArrayTracker() {\n    var self = this;\n    self.info = {};\n  }\n\n  return afArrayTracker;\n}();\n\nArrayTracker.prototype.getMinMax = function () {\n  function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n    var defs = AutoForm.Utility.getFieldDefinition(ss, field); // minCount is set by the schema, but can be set higher on the field attribute\n\n    overrideMinCount = overrideMinCount || 0;\n    var minCount = defs.minCount || 0;\n    minCount = Math.max(overrideMinCount, minCount); // maxCount is set by the schema, but can be set lower on the field attribute\n\n    overrideMaxCount = overrideMaxCount || Infinity;\n    var maxCount = defs.maxCount || Infinity;\n    maxCount = Math.min(overrideMaxCount, maxCount);\n    return {\n      minCount: minCount,\n      maxCount: maxCount\n    };\n  }\n\n  return atGetMinMax;\n}();\n\nArrayTracker.prototype.initForm = function () {\n  function atInitForm(formId) {\n    var self = this;\n    if (self.info[formId]) return;\n    self.info[formId] = {};\n  }\n\n  return atInitForm;\n}();\n\nArrayTracker.prototype.getForm = function () {\n  function atInitForm(formId) {\n    var self = this;\n    self.initForm(formId);\n    return self.info[formId];\n  }\n\n  return atInitForm;\n}();\n\nArrayTracker.prototype.ensureField = function () {\n  function atEnsureField(formId, field) {\n    var self = this;\n    self.initForm(formId);\n    if (!self.info[formId][field]) self.resetField(formId, field);\n  }\n\n  return atEnsureField;\n}();\n\nArrayTracker.prototype.initField = function () {\n  function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n    var self = this;\n    self.ensureField(formId, field);\n    if (self.info[formId][field].array != null) return; // If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n    // If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n\n    var range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n    var arrayCount = Math.max(range.minCount, docCount == null ? 1 : docCount); // If this is an array of objects, collect names of object props\n\n    var childKeys = [];\n\n    if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n      childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n    }\n\n    var loopArray = [];\n\n    for (var i = 0; i < arrayCount; i++) {\n      var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n      loopArray.push(loopCtx);\n    }\n\n    self.info[formId][field].array = loopArray;\n    var count = loopArray.length;\n    self.info[formId][field].count = count;\n    self.info[formId][field].visibleCount = count;\n    self.info[formId][field].deps.changed();\n  }\n\n  return atInitField;\n}();\n\nArrayTracker.prototype.resetField = function () {\n  function atResetField(formId, field) {\n    var self = this;\n    self.initForm(formId);\n\n    if (!self.info[formId][field]) {\n      self.info[formId][field] = {\n        deps: new Tracker.Dependency()\n      };\n    }\n\n    self.info[formId][field].array = null;\n    self.info[formId][field].count = 0;\n    self.info[formId][field].visibleCount = 0;\n    self.info[formId][field].deps.changed();\n  }\n\n  return atResetField;\n}();\n\nArrayTracker.prototype.resetForm = function () {\n  function atResetForm(formId) {\n    var self = this;\n\n    _.each(self.info[formId], function (info, field) {\n      self.resetField(formId, field);\n    });\n  }\n\n  return atResetForm;\n}();\n\nArrayTracker.prototype.untrackForm = function () {\n  function atUntrackForm(formId) {\n    var self = this;\n    self.info[formId] = {};\n  }\n\n  return atUntrackForm;\n}();\n\nArrayTracker.prototype.tracksField = function () {\n  function atTracksField(formId, field) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n    return !!self.info[formId][field].array;\n  }\n\n  return atTracksField;\n}();\n\nArrayTracker.prototype.getField = function () {\n  function atGetField(formId, field) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n    return self.info[formId][field].array;\n  }\n\n  return atGetField;\n}();\n\nArrayTracker.prototype.getCount = function () {\n  function atGetCount(formId, field) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n    return self.info[formId][field].count;\n  }\n\n  return atGetCount;\n}();\n\nArrayTracker.prototype.getVisibleCount = function () {\n  function atGetVisibleCount(formId, field) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n    return self.info[formId][field].visibleCount;\n  }\n\n  return atGetVisibleCount;\n}();\n\nArrayTracker.prototype.isFirstFieldlVisible = function () {\n  function atIsFirstFieldlVisible(formId, field, currentIndex) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n\n    var firstVisibleField = _.find(self.info[formId][field].array, function (currentField) {\n      return !currentField.removed;\n    });\n\n    return firstVisibleField && firstVisibleField.index === currentIndex;\n  }\n\n  return atIsFirstFieldlVisible;\n}();\n\nArrayTracker.prototype.isLastFieldlVisible = function () {\n  function atIsLastFieldlVisible(formId, field, currentIndex) {\n    var self = this;\n    self.ensureField(formId, field);\n    self.info[formId][field].deps.depend();\n\n    var lastVisibleField = _.last(_.filter(self.info[formId][field].array, function (currentField) {\n      return !currentField.removed;\n    }));\n\n    return lastVisibleField && lastVisibleField.index === currentIndex;\n  }\n\n  return atIsLastFieldlVisible;\n}();\n\nArrayTracker.prototype.addOneToField = function () {\n  function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n    var self = this;\n    self.ensureField(formId, field);\n    if (!self.info[formId][field].array) return;\n    var currentCount = self.info[formId][field].visibleCount;\n    var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n    if (currentCount < maxCount) {\n      var i = self.info[formId][field].array.length; // If this is an array of objects, collect names of object props\n\n      var childKeys = [];\n\n      if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n        childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n      }\n\n      var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n      self.info[formId][field].array.push(loopCtx);\n      self.info[formId][field].count++;\n      self.info[formId][field].visibleCount++;\n      self.info[formId][field].deps.changed();\n    }\n  }\n\n  return atAddOneToField;\n}();\n\nArrayTracker.prototype.removeFromFieldAtIndex = function () {\n  function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n    var self = this;\n    self.ensureField(formId, field);\n    if (!self.info[formId][field].array) return;\n    var currentCount = self.info[formId][field].visibleCount;\n    var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n    if (currentCount > minCount) {\n      self.info[formId][field].array[index].removed = true;\n      self.info[formId][field].count--;\n      self.info[formId][field].visibleCount--;\n      self.info[formId][field].deps.changed();\n    }\n  }\n\n  return atRemoveFromFieldAtIndex;\n}();\n/*\n * PRIVATE\n */\n\n\nvar createLoopCtx = function (formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {\n  var loopCtx = {\n    formId: formId,\n    arrayFieldName: field,\n    name: field + '.' + index,\n    index: index,\n    minCount: overrideMinCount,\n    maxCount: overrideMaxCount\n  }; // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n\n  if (childKeys.length) {\n    loopCtx.current = {};\n\n    _.each(childKeys, function (k) {\n      loopCtx.current[k] = field + '.' + index + '.' + k;\n    });\n  }\n\n  return loopCtx;\n};","map":{"version":3,"sources":["packages/aldeed:autoform/autoform-arrays.js"],"names":["ArrayTracker","afArrayTracker","self","info","prototype","getMinMax","atGetMinMax","ss","field","overrideMinCount","overrideMaxCount","defs","AutoForm","Utility","getFieldDefinition","minCount","Math","max","Infinity","maxCount","min","initForm","atInitForm","formId","getForm","ensureField","atEnsureField","resetField","initField","atInitField","docCount","array","range","arrayCount","childKeys","type","Object","objectKeys","makeKeyGeneric","loopArray","i","loopCtx","createLoopCtx","push","count","length","visibleCount","deps","changed","atResetField","Tracker","Dependency","resetForm","atResetForm","_","each","untrackForm","atUntrackForm","tracksField","atTracksField","depend","getField","atGetField","getCount","atGetCount","getVisibleCount","atGetVisibleCount","isFirstFieldlVisible","atIsFirstFieldlVisible","currentIndex","firstVisibleField","find","currentField","removed","index","isLastFieldlVisible","atIsLastFieldlVisible","lastVisibleField","last","filter","addOneToField","atAddOneToField","currentCount","removeFromFieldAtIndex","atRemoveFromFieldAtIndex","arrayFieldName","name","current","k"],"mappings":"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","sourcesContent":["// Track arrays; this allows us to add/remove fields or groups of fields for an array\n// but still easily respect minCount and maxCount, and properly add/remove the same\n// items from the database once the form is submitted.\n\nArrayTracker = function afArrayTracker() {\n  var self = this;\n  self.info = {};\n};\n\nArrayTracker.prototype.getMinMax = function atGetMinMax(ss, field, overrideMinCount, overrideMaxCount) {\n  var defs = AutoForm.Utility.getFieldDefinition(ss, field);\n\n  // minCount is set by the schema, but can be set higher on the field attribute\n  overrideMinCount = overrideMinCount || 0;\n  var minCount = defs.minCount || 0;\n  minCount = Math.max(overrideMinCount, minCount);\n\n  // maxCount is set by the schema, but can be set lower on the field attribute\n  overrideMaxCount = overrideMaxCount || Infinity;\n  var maxCount = defs.maxCount || Infinity;\n  maxCount = Math.min(overrideMaxCount, maxCount);\n\n  return { minCount: minCount, maxCount: maxCount };\n};\n\nArrayTracker.prototype.initForm = function atInitForm(formId) {\n  var self = this;\n\n  if (self.info[formId]) return;\n\n  self.info[formId] = {};\n};\n\nArrayTracker.prototype.getForm = function atInitForm(formId) {\n  var self = this;\n  self.initForm(formId);\n  return self.info[formId];\n};\n\nArrayTracker.prototype.ensureField = function atEnsureField(formId, field) {\n  var self = this;\n  self.initForm(formId);\n\n  if (!self.info[formId][field]) self.resetField(formId, field);\n};\n\nArrayTracker.prototype.initField = function atInitField(formId, field, ss, docCount, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (self.info[formId][field].array != null) return;\n\n// If we have a doc: The count should be the maximum of docCount or schema minCount or field minCount or 1.\n// If we don't have a doc: The count should be the maximum of schema minCount or field minCount or 1.\n  var range = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount);\n  var arrayCount = Math.max(range.minCount, (docCount == null) ? 1 : docCount);\n\n// If this is an array of objects, collect names of object props\n  var childKeys = [];\n  if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n    childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n\t}\n\n  var loopArray = [];\n  for (var i = 0; i < arrayCount; i++) {\n    var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n    loopArray.push(loopCtx);\n  }\n\n  self.info[formId][field].array = loopArray;\n  var count = loopArray.length;\n  self.info[formId][field].count = count;\n  self.info[formId][field].visibleCount = count;\n  self.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetField = function atResetField(formId, field) {\n  var self = this;\n  self.initForm(formId);\n\n  if (!self.info[formId][field]) {\n    self.info[formId][field] = {\n      deps: new Tracker.Dependency()\n\t\t};\n\t}\n\n  self.info[formId][field].array = null;\n  self.info[formId][field].count = 0;\n  self.info[formId][field].visibleCount = 0;\n  self.info[formId][field].deps.changed();\n};\n\nArrayTracker.prototype.resetForm = function atResetForm(formId) {\n  var self = this;\n  _.each(self.info[formId], function (info, field) {\n    self.resetField(formId, field);\n\t});\n};\n\nArrayTracker.prototype.untrackForm = function atUntrackForm(formId) {\n  var self = this;\n  self.info[formId] = {};\n};\n\nArrayTracker.prototype.tracksField = function atTracksField(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return !!self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getField = function atGetField(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].array;\n};\n\nArrayTracker.prototype.getCount = function atGetCount(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].count;\n};\n\nArrayTracker.prototype.getVisibleCount = function atGetVisibleCount(formId, field) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  return self.info[formId][field].visibleCount;\n};\n\nArrayTracker.prototype.isFirstFieldlVisible = function atIsFirstFieldlVisible(formId, field, currentIndex) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  var firstVisibleField = _.find(self.info[formId][field].array, function(currentField) {\n    return !currentField.removed;\n\t});\n\treturn (firstVisibleField && firstVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.isLastFieldlVisible = function atIsLastFieldlVisible(formId, field, currentIndex) {\n  var self = this;\n  self.ensureField(formId, field);\n  self.info[formId][field].deps.depend();\n  var lastVisibleField = _.last(_.filter(self.info[formId][field].array, function(currentField) {\n    return !currentField.removed;\n\t}));\n  return (lastVisibleField && lastVisibleField.index === currentIndex);\n};\n\nArrayTracker.prototype.addOneToField = function atAddOneToField(formId, field, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) return;\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var maxCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).maxCount;\n\n  if (currentCount < maxCount) {\n    var i = self.info[formId][field].array.length;\n\n    // If this is an array of objects, collect names of object props\n    var childKeys = [];\n    if (AutoForm.Utility.getFieldDefinition(ss, field + '.$').type === Object) {\n      childKeys = ss.objectKeys(AutoForm.Utility.makeKeyGeneric(field) + '.$');\n\t  }\n\n    var loopCtx = createLoopCtx(formId, field, i, childKeys, overrideMinCount, overrideMaxCount);\n\n    self.info[formId][field].array.push(loopCtx);\n    self.info[formId][field].count++;\n    self.info[formId][field].visibleCount++;\n    self.info[formId][field].deps.changed();\n  }\n};\n\nArrayTracker.prototype.removeFromFieldAtIndex = function atRemoveFromFieldAtIndex(formId, field, index, ss, overrideMinCount, overrideMaxCount) {\n  var self = this;\n  self.ensureField(formId, field);\n\n  if (!self.info[formId][field].array) return;\n\n  var currentCount = self.info[formId][field].visibleCount;\n  var minCount = self.getMinMax(ss, field, overrideMinCount, overrideMaxCount).minCount;\n\n  if (currentCount > minCount) {\n    self.info[formId][field].array[index].removed = true;\n    self.info[formId][field].count--;\n    self.info[formId][field].visibleCount--;\n    self.info[formId][field].deps.changed();\n  }\n};\n\n/*\n * PRIVATE\n */\nvar createLoopCtx = function(formId, field, index, childKeys, overrideMinCount, overrideMaxCount) {\n  var loopCtx = {\n    formId:         formId,\n    arrayFieldName: field,\n    name:           field + '.' + index,\n    index:          index,\n    minCount:       overrideMinCount,\n    maxCount:       overrideMaxCount\n  };\n\n  // If this is an array of objects, add child key names under loopCtx.current[childName] = fullKeyName\n  if (childKeys.length) {\n    loopCtx.current = {};\n    _.each(childKeys, function (k) {\n      loopCtx.current[k] = field + '.' + index + '.' + k;\n    });\n  }\n\n  return loopCtx;\n};\n"]},"sourceType":"script","hash":"934c69a24b60435ab6e8c0c812c67960814bc24f"}
