{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/inputTypes/value-converters.js","filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","root":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","generatorOpts":{"filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/inputTypes/value-converters.js"}},"code":"/*\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */\nAutoForm.valueConverters = {\n  booleanToString: function booleanToString(val) {\n    if (val === true) {\n      return \"TRUE\";\n    } else if (val === false) {\n      return \"FALSE\";\n    }\n\n    return val;\n  },\n  booleanToStringArray: function booleanToStringArray(val) {\n    if (val === true) {\n      return [\"TRUE\"];\n    } else if (val === false) {\n      return [\"FALSE\"];\n    }\n\n    return val;\n  },\n  booleanToNumber: function booleanToNumber(val) {\n    if (val === true) {\n      return 1;\n    } else if (val === false) {\n      return 0;\n    }\n\n    return val;\n  },\n  booleanToNumberArray: function booleanToNumberArray(val) {\n    if (val === true) {\n      return [1];\n    } else if (val === false) {\n      return [0];\n    }\n\n    return val;\n  },\n\n  /**\n   * @method  AutoForm.valueConverters.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function dateToDateString(val) {\n    return val instanceof Date ? moment(val).format(\"YYYY-MM-DD\") : val;\n  },\n\n  /**\n   * @method  AutoForm.valueConverters.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function dateToDateStringUTC(val) {\n    return val instanceof Date ? moment.utc(val).format(\"YYYY-MM-DD\") : val;\n  },\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];\n    }\n\n    return val;\n  },\n\n  /**\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {\n    return val instanceof Date ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;\n  },\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];\n    }\n\n    return val;\n  },\n\n  /**\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date The Date object\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {\n    var m = moment(date); // by default, we assume local timezone; add moment-timezone to app and pass timezoneId\n    // to use a different timezone\n\n    if (typeof timezoneId === \"string\") {\n      if (typeof m.tz !== \"function\") {\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }\n\n      m.tz(timezoneId);\n    }\n\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");\n  },\n  dateToNumber: function dateToNumber(val) {\n    return val instanceof Date ? val.getTime() : val;\n  },\n  dateToNumberArray: function dateToNumberArray(val) {\n    if (val instanceof Date) {\n      return [val.getTime()];\n    }\n\n    return val;\n  },\n  dateToDateArray: function dateToDateArray(val) {\n    if (val instanceof Date) {\n      return [val];\n    }\n\n    return val;\n  },\n  stringToStringArray: function stringToStringArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        return $.trim(item);\n      });\n    }\n\n    return val;\n  },\n\n  /**\n   * @method AutoForm.valueConverters.stringToNumber\n   * @public\n   * @param {String} val A string or null or undefined.\n   * @return {Number|String} The string converted to a Number or the original value.\n   *\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.\n   */\n  stringToNumber: function stringToNumber(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var numVal = Number(val);\n\n      if (!isNaN(numVal)) {\n        return numVal;\n      }\n    }\n\n    return val;\n  },\n  stringToNumberArray: function stringToNumberArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToNumber(item);\n      });\n    }\n\n    return val;\n  },\n\n  /**\n   * @method AutoForm.valueConverters.stringToBoolean\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Boolean|String} The string converted to a Boolean.\n   *\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */\n  stringToBoolean: function stringToBoolean(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var lval = val.toLowerCase();\n\n      if (lval === \"true\" || lval === \"1\") {\n        return true;\n      } else if (lval === \"false\" || lval === \"0\") {\n        return false;\n      }\n    }\n\n    return val;\n  },\n  stringToBooleanArray: function stringToBooleanArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToBoolean(item);\n      });\n    }\n\n    return val;\n  },\n\n  /**\n   * @method AutoForm.valueConverters.stringToDate\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Date|String} The string converted to a Date instance.\n   *\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */\n  stringToDate: function stringToDate(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      return new Date(val);\n    }\n\n    return val;\n  },\n  stringToDateArray: function stringToDateArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToDate(item);\n      });\n    }\n\n    return val;\n  },\n  numberToString: function numberToString(val) {\n    if (typeof val === \"number\") {\n      return val.toString();\n    }\n\n    return val;\n  },\n  numberToStringArray: function numberToStringArray(val) {\n    if (typeof val === \"number\") {\n      return [val.toString()];\n    }\n\n    return val;\n  },\n  numberToNumberArray: function numberToNumberArray(val) {\n    if (typeof val === \"number\") {\n      return [val];\n    }\n\n    return val;\n  },\n  numberToBoolean: function numberToBoolean(val) {\n    if (val === 0) {\n      return false;\n    } else if (val === 1) {\n      return true;\n    }\n\n    return val;\n  },\n  numberToBooleanArray: function numberToBooleanArray(val) {\n    if (val === 0) {\n      return [false];\n    } else if (val === 1) {\n      return [true];\n    }\n\n    return val;\n  }\n}; // BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object\n\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;","map":{"version":3,"sources":["packages/aldeed:autoform/inputTypes/value-converters.js"],"names":["AutoForm","valueConverters","booleanToString","val","booleanToStringArray","booleanToNumber","booleanToNumberArray","dateToDateString","Date","moment","format","dateToDateStringUTC","utc","dateToDateStringUTCArray","dateToNormalizedForcedUtcGlobalDateAndTimeString","dateToNormalizedForcedUtcGlobalDateAndTimeStringArray","dateToNormalizedLocalDateAndTimeString","date","timezoneId","m","tz","Error","dateToNumber","getTime","dateToNumberArray","dateToDateArray","stringToStringArray","split","_","map","item","$","trim","stringToNumber","length","numVal","Number","isNaN","stringToNumberArray","stringToBoolean","lval","toLowerCase","stringToBooleanArray","stringToDate","stringToDateArray","numberToString","toString","numberToStringArray","numberToNumberArray","numberToBoolean","numberToBooleanArray","Utility","stringToBool"],"mappings":"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","sourcesContent":["/*\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */\n\nAutoForm.valueConverters = {\n  booleanToString: function booleanToString(val) {\n    if (val === true) {\n      return \"TRUE\";\n    } else if (val === false) {\n      return \"FALSE\";\n    }\n    return val;\n  },\n  booleanToStringArray: function booleanToStringArray(val) {\n    if (val === true) {\n      return [\"TRUE\"];\n    } else if (val === false) {\n      return [\"FALSE\"];\n    }\n    return val;\n  },\n  booleanToNumber: function booleanToNumber(val) {\n    if (val === true) {\n      return 1;\n    } else if (val === false) {\n      return 0;\n    }\n    return val;\n  },\n  booleanToNumberArray: function booleanToNumberArray(val) {\n    if (val === true) {\n      return [1];\n    } else if (val === false) {\n      return [0];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function dateToDateString(val) {\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function dateToDateStringUTC(val) {\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;\n  },\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;\n  },\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date The Date object\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {\n    var m = moment(date);\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId\n    // to use a different timezone\n    if (typeof timezoneId === \"string\") {\n      if (typeof m.tz !== \"function\") {\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }\n      m.tz(timezoneId);\n    }\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");\n  },\n  dateToNumber: function dateToNumber(val) {\n    return (val instanceof Date) ? val.getTime() : val;\n  },\n  dateToNumberArray: function dateToNumberArray(val) {\n    if (val instanceof Date) {\n      return [val.getTime()];\n    }\n    return val;\n  },\n  dateToDateArray: function dateToDateArray(val) {\n    if (val instanceof Date) {\n      return [val];\n    }\n    return val;\n  },\n  stringToStringArray: function stringToStringArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        return $.trim(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToNumber\n   * @public\n   * @param {String} val A string or null or undefined.\n   * @return {Number|String} The string converted to a Number or the original value.\n   *\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.\n   */\n  stringToNumber: function stringToNumber(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var numVal = Number(val);\n      if (!isNaN(numVal)) {\n        return numVal;\n      }\n    }\n    return val;\n  },\n  stringToNumberArray: function stringToNumberArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToNumber(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToBoolean\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Boolean|String} The string converted to a Boolean.\n   *\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */\n  stringToBoolean: function stringToBoolean(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var lval = val.toLowerCase();\n      if (lval === \"true\" || lval === \"1\") {\n        return true;\n      } else if (lval === \"false\" || lval === \"0\") {\n        return false;\n      }\n    }\n    return val;\n  },\n  stringToBooleanArray: function stringToBooleanArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToBoolean(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToDate\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Date|String} The string converted to a Date instance.\n   *\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */\n  stringToDate: function stringToDate(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      return new Date(val);\n    }\n    return val;\n  },\n  stringToDateArray: function stringToDateArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToDate(item);\n      });\n    }\n    return val;\n  },\n  numberToString: function numberToString(val) {\n    if (typeof val === \"number\") {\n      return val.toString();\n    }\n    return val;\n  },\n  numberToStringArray: function numberToStringArray(val) {\n    if (typeof val === \"number\") {\n      return [val.toString()];\n    }\n    return val;\n  },\n  numberToNumberArray: function numberToNumberArray(val) {\n    if (typeof val === \"number\") {\n      return [val];\n    }\n    return val;\n  },\n  numberToBoolean: function numberToBoolean(val) {\n    if (val === 0) {\n      return false;\n    } else if (val === 1) {\n      return true;\n    }\n    return val;\n  },\n  numberToBooleanArray: function numberToBooleanArray(val) {\n    if (val === 0) {\n      return [false];\n    } else if (val === 1) {\n      return [true];\n    }\n    return val;\n  }\n};\n\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;\n"]},"sourceType":"script","hash":"d36c254cb41567445def9a4cdb1c8c405b5e0bfa"}
