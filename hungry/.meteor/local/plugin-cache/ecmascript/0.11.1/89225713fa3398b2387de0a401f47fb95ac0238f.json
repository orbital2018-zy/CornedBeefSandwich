{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":false}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$5","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$6","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$4","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$5","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$6","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$7","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$9","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$11","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$12","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$13","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$14","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$15","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$16","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$17","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$18","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$19","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$20","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$21","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$22","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$23","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/aldeed:autoform/inputTypes/value-converters.js","filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry","root":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry","generatorOpts":{"filename":"C:\\Users\\sandh\\Documents\\NUS\\Orbital\\GitHungry\\app\\orbital\\hungry\\packages\\aldeed:autoform\\inputTypes\\value-converters.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/aldeed:autoform/inputTypes/value-converters.js"}},"code":"/*\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */\nAutoForm.valueConverters = {\n  booleanToString: function () {\n    function booleanToString(val) {\n      if (val === true) {\n        return \"TRUE\";\n      } else if (val === false) {\n        return \"FALSE\";\n      }\n\n      return val;\n    }\n\n    return booleanToString;\n  }(),\n  booleanToStringArray: function () {\n    function booleanToStringArray(val) {\n      if (val === true) {\n        return [\"TRUE\"];\n      } else if (val === false) {\n        return [\"FALSE\"];\n      }\n\n      return val;\n    }\n\n    return booleanToStringArray;\n  }(),\n  booleanToNumber: function () {\n    function booleanToNumber(val) {\n      if (val === true) {\n        return 1;\n      } else if (val === false) {\n        return 0;\n      }\n\n      return val;\n    }\n\n    return booleanToNumber;\n  }(),\n  booleanToNumberArray: function () {\n    function booleanToNumberArray(val) {\n      if (val === true) {\n        return [1];\n      } else if (val === false) {\n        return [0];\n      }\n\n      return val;\n    }\n\n    return booleanToNumberArray;\n  }(),\n\n  /**\n   * @method  AutoForm.valueConverters.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function () {\n    function dateToDateString(val) {\n      return val instanceof Date ? moment(val).format(\"YYYY-MM-DD\") : val;\n    }\n\n    return dateToDateString;\n  }(),\n\n  /**\n   * @method  AutoForm.valueConverters.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function () {\n    function dateToDateStringUTC(val) {\n      return val instanceof Date ? moment.utc(val).format(\"YYYY-MM-DD\") : val;\n    }\n\n    return dateToDateStringUTC;\n  }(),\n  dateToDateStringUTCArray: function () {\n    function dateToDateStringUTCArray(val) {\n      if (val instanceof Date) {\n        return [AutoForm.valueConverters.dateToDateStringUTC(val)];\n      }\n\n      return val;\n    }\n\n    return dateToDateStringUTCArray;\n  }(),\n\n  /**\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function () {\n    function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {\n      return val instanceof Date ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;\n    }\n\n    return dateToNormalizedForcedUtcGlobalDateAndTimeString;\n  }(),\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function () {\n    function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n      if (val instanceof Date) {\n        return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];\n      }\n\n      return val;\n    }\n\n    return dateToNormalizedForcedUtcGlobalDateAndTimeStringArray;\n  }(),\n\n  /**\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date The Date object\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function () {\n    function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {\n      var m = moment(date); // by default, we assume local timezone; add moment-timezone to app and pass timezoneId\n      // to use a different timezone\n\n      if (typeof timezoneId === \"string\") {\n        if (typeof m.tz !== \"function\") {\n          throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n        }\n\n        m.tz(timezoneId);\n      }\n\n      return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");\n    }\n\n    return dateToNormalizedLocalDateAndTimeString;\n  }(),\n  dateToNumber: function () {\n    function dateToNumber(val) {\n      return val instanceof Date ? val.getTime() : val;\n    }\n\n    return dateToNumber;\n  }(),\n  dateToNumberArray: function () {\n    function dateToNumberArray(val) {\n      if (val instanceof Date) {\n        return [val.getTime()];\n      }\n\n      return val;\n    }\n\n    return dateToNumberArray;\n  }(),\n  dateToDateArray: function () {\n    function dateToDateArray(val) {\n      if (val instanceof Date) {\n        return [val];\n      }\n\n      return val;\n    }\n\n    return dateToDateArray;\n  }(),\n  stringToStringArray: function () {\n    function stringToStringArray(val) {\n      if (typeof val === \"string\") {\n        val = val.split(\",\");\n        return _.map(val, function (item) {\n          return $.trim(item);\n        });\n      }\n\n      return val;\n    }\n\n    return stringToStringArray;\n  }(),\n\n  /**\n   * @method AutoForm.valueConverters.stringToNumber\n   * @public\n   * @param {String} val A string or null or undefined.\n   * @return {Number|String} The string converted to a Number or the original value.\n   *\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.\n   */\n  stringToNumber: function () {\n    function stringToNumber(val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        var numVal = Number(val);\n\n        if (!isNaN(numVal)) {\n          return numVal;\n        }\n      }\n\n      return val;\n    }\n\n    return stringToNumber;\n  }(),\n  stringToNumberArray: function () {\n    function stringToNumberArray(val) {\n      if (typeof val === \"string\") {\n        val = val.split(\",\");\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.valueConverters.stringToNumber(item);\n        });\n      }\n\n      return val;\n    }\n\n    return stringToNumberArray;\n  }(),\n\n  /**\n   * @method AutoForm.valueConverters.stringToBoolean\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Boolean|String} The string converted to a Boolean.\n   *\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */\n  stringToBoolean: function () {\n    function stringToBoolean(val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        var lval = val.toLowerCase();\n\n        if (lval === \"true\" || lval === \"1\") {\n          return true;\n        } else if (lval === \"false\" || lval === \"0\") {\n          return false;\n        }\n      }\n\n      return val;\n    }\n\n    return stringToBoolean;\n  }(),\n  stringToBooleanArray: function () {\n    function stringToBooleanArray(val) {\n      if (typeof val === \"string\") {\n        val = val.split(\",\");\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.valueConverters.stringToBoolean(item);\n        });\n      }\n\n      return val;\n    }\n\n    return stringToBooleanArray;\n  }(),\n\n  /**\n   * @method AutoForm.valueConverters.stringToDate\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Date|String} The string converted to a Date instance.\n   *\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */\n  stringToDate: function () {\n    function stringToDate(val) {\n      if (typeof val === \"string\" && val.length > 0) {\n        return new Date(val);\n      }\n\n      return val;\n    }\n\n    return stringToDate;\n  }(),\n  stringToDateArray: function () {\n    function stringToDateArray(val) {\n      if (typeof val === \"string\") {\n        val = val.split(\",\");\n        return _.map(val, function (item) {\n          item = $.trim(item);\n          return AutoForm.valueConverters.stringToDate(item);\n        });\n      }\n\n      return val;\n    }\n\n    return stringToDateArray;\n  }(),\n  numberToString: function () {\n    function numberToString(val) {\n      if (typeof val === \"number\") {\n        return val.toString();\n      }\n\n      return val;\n    }\n\n    return numberToString;\n  }(),\n  numberToStringArray: function () {\n    function numberToStringArray(val) {\n      if (typeof val === \"number\") {\n        return [val.toString()];\n      }\n\n      return val;\n    }\n\n    return numberToStringArray;\n  }(),\n  numberToNumberArray: function () {\n    function numberToNumberArray(val) {\n      if (typeof val === \"number\") {\n        return [val];\n      }\n\n      return val;\n    }\n\n    return numberToNumberArray;\n  }(),\n  numberToBoolean: function () {\n    function numberToBoolean(val) {\n      if (val === 0) {\n        return false;\n      } else if (val === 1) {\n        return true;\n      }\n\n      return val;\n    }\n\n    return numberToBoolean;\n  }(),\n  numberToBooleanArray: function () {\n    function numberToBooleanArray(val) {\n      if (val === 0) {\n        return [false];\n      } else if (val === 1) {\n        return [true];\n      }\n\n      return val;\n    }\n\n    return numberToBooleanArray;\n  }()\n}; // BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object\n\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;","map":{"version":3,"sources":["packages/aldeed:autoform/inputTypes/value-converters.js"],"names":["AutoForm","valueConverters","booleanToString","val","booleanToStringArray","booleanToNumber","booleanToNumberArray","dateToDateString","Date","moment","format","dateToDateStringUTC","utc","dateToDateStringUTCArray","dateToNormalizedForcedUtcGlobalDateAndTimeString","dateToNormalizedForcedUtcGlobalDateAndTimeStringArray","dateToNormalizedLocalDateAndTimeString","date","timezoneId","m","tz","Error","dateToNumber","getTime","dateToNumberArray","dateToDateArray","stringToStringArray","split","_","map","item","$","trim","stringToNumber","length","numVal","Number","isNaN","stringToNumberArray","stringToBoolean","lval","toLowerCase","stringToBooleanArray","stringToDate","stringToDateArray","numberToString","toString","numberToStringArray","numberToNumberArray","numberToBoolean","numberToBooleanArray","Utility","stringToBool"],"mappings":"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","sourcesContent":["/*\n * The conversion functions in this file can be used by input types to convert their outgoing values into the data type expected by the schema\n */\n\nAutoForm.valueConverters = {\n  booleanToString: function booleanToString(val) {\n    if (val === true) {\n      return \"TRUE\";\n    } else if (val === false) {\n      return \"FALSE\";\n    }\n    return val;\n  },\n  booleanToStringArray: function booleanToStringArray(val) {\n    if (val === true) {\n      return [\"TRUE\"];\n    } else if (val === false) {\n      return [\"FALSE\"];\n    }\n    return val;\n  },\n  booleanToNumber: function booleanToNumber(val) {\n    if (val === true) {\n      return 1;\n    } else if (val === false) {\n      return 0;\n    }\n    return val;\n  },\n  booleanToNumberArray: function booleanToNumberArray(val) {\n    if (val === true) {\n      return [1];\n    } else if (val === false) {\n      return [0];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the local date.\n   */\n  dateToDateString: function dateToDateString(val) {\n    return (val instanceof Date) ? moment(val).format(\"YYYY-MM-DD\") : val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToDateStringUTC\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid date string\" representing the date converted to the UTC time zone.\n   */\n  dateToDateStringUTC: function dateToDateStringUTC(val) {\n    return (val instanceof Date) ? moment.utc(val).format(\"YYYY-MM-DD\") : val;\n  },\n  dateToDateStringUTCArray: function dateToDateStringUTCArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToDateStringUTC(val)];\n    }\n    return val;\n  },\n  /**\n   * @method  AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString\n   * @private\n   * @param  {Date} date\n   * @return {String}\n   *\n   * Returns a \"valid normalized forced-UTC global date and time string\" representing the time\n   * converted to the UTC time zone and expressed as the shortest possible string for the given\n   * time (e.g. omitting the seconds component entirely if the given time is zero seconds past the minute).\n   *\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#date-and-time-state-(type=datetime)\n   * http://www.whatwg.org/specs/web-apps/current-work/multipage/common-microsyntaxes.html#valid-normalized-forced-utc-global-date-and-time-string\n   */\n  dateToNormalizedForcedUtcGlobalDateAndTimeString: function dateToNormalizedForcedUtcGlobalDateAndTimeString(val) {\n    return (val instanceof Date) ? moment(val).utc().format(\"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]\") : val;\n  },\n  dateToNormalizedForcedUtcGlobalDateAndTimeStringArray: function dateToNormalizedForcedUtcGlobalDateAndTimeStringArray(val) {\n    if (val instanceof Date) {\n      return [AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString(val)];\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString\n   * @private\n   * @param {Date} date The Date object\n   * @param {String} [timezoneId] A valid timezoneId that moment-timezone understands, e.g., \"America/Los_Angeles\"\n   * @return {String}\n   *\n   * Returns a \"valid normalized local date and time string\".\n   */\n  dateToNormalizedLocalDateAndTimeString: function dateToNormalizedLocalDateAndTimeString(date, timezoneId) {\n    var m = moment(date);\n    // by default, we assume local timezone; add moment-timezone to app and pass timezoneId\n    // to use a different timezone\n    if (typeof timezoneId === \"string\") {\n      if (typeof m.tz !== \"function\") {\n        throw new Error(\"If you specify a timezoneId, make sure that you've added a moment-timezone package to your app\");\n      }\n      m.tz(timezoneId);\n    }\n    return m.format(\"YYYY-MM-DD[T]HH:mm:ss.SSS\");\n  },\n  dateToNumber: function dateToNumber(val) {\n    return (val instanceof Date) ? val.getTime() : val;\n  },\n  dateToNumberArray: function dateToNumberArray(val) {\n    if (val instanceof Date) {\n      return [val.getTime()];\n    }\n    return val;\n  },\n  dateToDateArray: function dateToDateArray(val) {\n    if (val instanceof Date) {\n      return [val];\n    }\n    return val;\n  },\n  stringToStringArray: function stringToStringArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        return $.trim(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToNumber\n   * @public\n   * @param {String} val A string or null or undefined.\n   * @return {Number|String} The string converted to a Number or the original value.\n   *\n   * For strings, returns Number(val) unless the result is NaN. Otherwise returns val.\n   */\n  stringToNumber: function stringToNumber(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var numVal = Number(val);\n      if (!isNaN(numVal)) {\n        return numVal;\n      }\n    }\n    return val;\n  },\n  stringToNumberArray: function stringToNumberArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToNumber(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToBoolean\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Boolean|String} The string converted to a Boolean.\n   *\n   * If the string is \"true\" or \"1\", returns `true`. If the string is \"false\" or \"0\", returns `false`. Otherwise returns the original string.\n   */\n  stringToBoolean: function stringToBoolean(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      var lval = val.toLowerCase();\n      if (lval === \"true\" || lval === \"1\") {\n        return true;\n      } else if (lval === \"false\" || lval === \"0\") {\n        return false;\n      }\n    }\n    return val;\n  },\n  stringToBooleanArray: function stringToBooleanArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToBoolean(item);\n      });\n    }\n    return val;\n  },\n  /**\n   * @method AutoForm.valueConverters.stringToDate\n   * @private\n   * @param {String} val A string or null or undefined.\n   * @return {Date|String} The string converted to a Date instance.\n   *\n   * Returns new Date(val) as long as val is a string with at least one character. Otherwise returns the original string.\n   */\n  stringToDate: function stringToDate(val) {\n    if (typeof val === \"string\" && val.length > 0) {\n      return new Date(val);\n    }\n    return val;\n  },\n  stringToDateArray: function stringToDateArray(val) {\n    if (typeof val === \"string\") {\n      val = val.split(\",\");\n      return _.map(val, function (item) {\n        item = $.trim(item);\n        return AutoForm.valueConverters.stringToDate(item);\n      });\n    }\n    return val;\n  },\n  numberToString: function numberToString(val) {\n    if (typeof val === \"number\") {\n      return val.toString();\n    }\n    return val;\n  },\n  numberToStringArray: function numberToStringArray(val) {\n    if (typeof val === \"number\") {\n      return [val.toString()];\n    }\n    return val;\n  },\n  numberToNumberArray: function numberToNumberArray(val) {\n    if (typeof val === \"number\") {\n      return [val];\n    }\n    return val;\n  },\n  numberToBoolean: function numberToBoolean(val) {\n    if (val === 0) {\n      return false;\n    } else if (val === 1) {\n      return true;\n    }\n    return val;\n  },\n  numberToBooleanArray: function numberToBooleanArray(val) {\n    if (val === 0) {\n      return [false];\n    } else if (val === 1) {\n      return [true];\n    }\n    return val;\n  }\n};\n\n// BACKWARDS COMPATIBILITY - some of these were formerly on the Utility object\nUtility.dateToDateString = AutoForm.valueConverters.dateToDateString;\nUtility.dateToDateStringUTC = AutoForm.valueConverters.dateToDateStringUTC;\nUtility.dateToNormalizedForcedUtcGlobalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedForcedUtcGlobalDateAndTimeString;\nUtility.dateToNormalizedLocalDateAndTimeString = AutoForm.valueConverters.dateToNormalizedLocalDateAndTimeString;\nUtility.stringToBool = AutoForm.valueConverters.stringToBoolean;\nUtility.stringToNumber = AutoForm.valueConverters.stringToNumber;\nUtility.stringToDate = AutoForm.valueConverters.stringToDate;\n"]},"sourceType":"script","hash":"89225713fa3398b2387de0a401f47fb95ac0238f"}
