{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:components\\lib\\base.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/easysearch:components/lib/base.js","filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:components\\lib\\base.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","root":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","generatorOpts":{"filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:components\\lib\\base.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/easysearch:components/lib/base.js"}},"code":"/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = class BaseComponent extends BlazeComponent {\n  /**\n   * Return the name of the component.\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this.getData().name;\n  }\n  /**\n   * Return an array of properties that are reserved to the base component.\n   *\n   * @returns {String[]}\n   */\n\n\n  static get reserveredProperties() {\n    return ['index', 'indexes', 'name', 'attributes'];\n  }\n  /**\n   * Setup component on created.\n   */\n\n\n  onCreated() {\n    this.autorun(() => this.initializeBase());\n  }\n\n  initializeBase() {\n    let index = this.getData().index,\n        indexes = [index];\n\n    if (!index) {\n      indexes = this.getData().indexes;\n    }\n\n    if (_.isEmpty(indexes)) {\n      throw new Meteor.Error('no-index', 'Please provide an index for your component');\n    }\n\n    if (indexes.filter(index => index instanceof EasySearch.Index).length !== indexes.length) {\n      throw new Meteor.Error('invalid-configuration', \"Did not receive an index or an array of indexes: \\\"\".concat(indexes.toString(), \"\\\"\"));\n    }\n\n    this.indexes = indexes;\n    this.options = _.defaults({}, _.omit(this.getData(), ...BaseComponent.reserveredProperties), this.defaultOptions);\n    check(this.name, Match.Optional(String));\n    check(this.options, Object);\n    this.eachIndex(function (index, name) {\n      if (!index.getComponentDict(name)) {\n        index.registerComponent(name);\n      }\n    });\n  }\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n\n  get defaultOptions() {\n    return {};\n  }\n  /**\n   * @param {String} searchStr\n   *\n   * @returns {Boolean}\n   */\n\n\n  shouldShowDocuments(searchStr) {\n    return !this.getData().noDocumentsOnEmpty || 0 < searchStr.length;\n  }\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n\n\n  search(searchString) {\n    check(searchString, String);\n    const showDocuments = this.shouldShowDocuments(searchString);\n    this.eachIndex(function (index, name) {\n      index.getComponentDict(name).set('showDocuments', showDocuments);\n\n      if (showDocuments) {\n        index.getComponentMethods(name).search(searchString);\n      }\n    });\n  }\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n\n\n  getData() {\n    return this.data() || {};\n  }\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n\n\n  get dicts() {\n    return this.eachIndex((index, name) => {\n      return index.getComponentDict(name);\n    }, 'map');\n  }\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n\n\n  eachIndex(func) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'each';\n    let componentScope = this,\n        logic = this.getData().logic;\n\n    if (!_.isEmpty(logic)) {\n      method = 'OR' === logic ? 'some' : 'every';\n    }\n\n    return _[method](this.indexes, function (index) {\n      return func.apply(this, [index, componentScope.name]);\n    });\n  }\n\n};\nEasySearch.BaseComponent = BaseComponent;","map":{"version":3,"sources":["packages/easysearch:components/lib/base.js"],"names":["BaseComponent","BlazeComponent","name","getData","reserveredProperties","onCreated","autorun","initializeBase","index","indexes","_","isEmpty","Meteor","Error","filter","EasySearch","Index","length","toString","options","defaults","omit","defaultOptions","check","Match","Optional","String","Object","eachIndex","getComponentDict","registerComponent","shouldShowDocuments","searchStr","noDocumentsOnEmpty","search","searchString","showDocuments","set","getComponentMethods","data","dicts","func","method","componentScope","logic","apply"],"mappings":"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","sourcesContent":["/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = class BaseComponent extends BlazeComponent {\n  /**\n   * Return the name of the component.\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this.getData().name;\n  }\n\n  /**\n   * Return an array of properties that are reserved to the base component.\n   *\n   * @returns {String[]}\n   */\n  static get reserveredProperties() {\n    return ['index', 'indexes', 'name', 'attributes'];\n  }\n\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    this.autorun(() => this.initializeBase());\n  }\n\n  initializeBase() {\n    let index = this.getData().index,\n      indexes = [index];\n\n    if (!index) {\n      indexes = this.getData().indexes;\n    }\n\n    if (_.isEmpty(indexes)) {\n      throw new Meteor.Error('no-index', 'Please provide an index for your component');\n    }\n\n    if (indexes.filter((index) => index instanceof EasySearch.Index).length !== indexes.length) {\n      throw new Meteor.Error(\n        'invalid-configuration',\n        `Did not receive an index or an array of indexes: \"${indexes.toString()}\"`\n      );\n    }\n\n    this.indexes = indexes;\n    this.options = _.defaults({}, _.omit(this.getData(), ...BaseComponent.reserveredProperties), this.defaultOptions);\n\n    check(this.name, Match.Optional(String));\n    check(this.options, Object);\n\n    this.eachIndex(function (index, name) {\n      if (!index.getComponentDict(name)) {\n        index.registerComponent(name);\n      }\n    });\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions () {\n    return {};\n  }\n\n  /**\n   * @param {String} searchStr\n   *\n   * @returns {Boolean}\n   */\n  shouldShowDocuments(searchStr) {\n    return !this.getData().noDocumentsOnEmpty || 0 < searchStr.length;\n  }\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n  search(searchString) {\n    check(searchString, String);\n\n    const showDocuments = this.shouldShowDocuments(searchString);\n\n    this.eachIndex(function (index, name) {\n      index.getComponentDict(name).set('showDocuments', showDocuments);\n\n      if (showDocuments) {\n        index.getComponentMethods(name).search(searchString);\n      }\n    });\n  }\n\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n  getData() {\n    return (this.data() || {});\n  }\n\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n  get dicts() {\n    return this.eachIndex((index, name) => {\n      return index.getComponentDict(name);\n    }, 'map');\n  }\n\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n  eachIndex(func, method = 'each') {\n    let componentScope = this,\n      logic = this.getData().logic;\n\n    if (!_.isEmpty(logic)) {\n      method = 'OR' === logic ? 'some' : 'every';\n    }\n\n    return _[method](this.indexes, function (index) {\n      return func.apply(this, [index, componentScope.name]);\n    });\n  }\n};\n\nEasySearch.BaseComponent = BaseComponent;\n"]},"sourceType":"script","hash":"789c96f28be106920f46ea361c5ce1827c7447c2"}
