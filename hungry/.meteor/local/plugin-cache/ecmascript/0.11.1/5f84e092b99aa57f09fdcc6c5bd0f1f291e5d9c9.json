{"metadata":{},"options":{"plugins":[{"key":"base$0$0","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"generateLetDeclarations":true,"enforceStrictMode":false}},{"key":"transform-meteor-dynamic-import","visitor":{"_exploded":{},"_verified":{},"CallExpression":{"enter":[null]}},"options":{}},{"key":"base$0$2","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"polyfill":false,"useBuiltIns":true}},{"key":"base$0$3","visitor":{"_exploded":{},"_verified":{},"PrivateName":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{"loose":true}},{"key":"base$0$4","visitor":{"Program":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"allowTopLevelThis":true,"strictMode":false,"loose":true}},{"key":"base$0$1$0","visitor":{"_exploded":{},"_verified":{},"JSXNamespacedName":{"enter":[null]},"JSXElement":{"exit":[null]},"JSXFragment":{"exit":[null]},"Program":{"enter":[null],"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","throwIfNamespace":true,"useBuiltIns":false}},{"key":"base$0$1$1","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$1","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$2","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$3","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"base$0$0$4","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$5","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$6","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]}},"options":{}},{"key":"base$0$0$7","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"base$0$0$8","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"base$0$0$9","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0$10","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}}],"presets":[],"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:core\\lib\\core\\cursor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining","pipelineOperator","throwExpressions","dynamicImport","classProperties","classPrivateProperties","jsx",["flow",{}],"asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}],"asyncGenerators"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"strictMode":false},"sourceFileName":"packages/easysearch:core/lib/core/cursor.js","filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:core\\lib\\core\\cursor.js","passPerPreset":false,"envName":"development","cwd":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","root":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry","generatorOpts":{"filename":"C:\\Users\\zhenying\\Hungry\\CornedBeefSandwich\\hungry\\packages\\easysearch:core\\lib\\core\\cursor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/easysearch:core/lib/core/cursor.js"}},"code":"/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nclass Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count) {\n    let isReady = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let publishHandle = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n\n\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n  /**\n   * Stop the subscription handle associated with the cursor.\n   */\n\n\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n\n\n  count() {\n    return this._count;\n  }\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n\n\n  isReady() {\n    return this._isReady;\n  }\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n\n\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n\n\n  static get emptyCursor() {\n    return {\n      fetch: () => [],\n      observe: () => {\n        return {\n          stop: () => null\n        };\n      },\n      stop: () => {}\n    };\n  }\n\n}\n\nmodule.exportDefault(Cursor);","map":{"version":3,"sources":["packages/easysearch:core/lib/core/cursor.js"],"names":["Cursor","constructor","mongoCursor","count","isReady","publishHandle","check","fetch","Function","Number","Match","Optional","Boolean","OneOf","Object","_mongoCursor","_count","_isReady","_publishHandle","stop","emptyCursor","observe","module","exportDefault"],"mappings":"AAAA;;;;;;AAMA,MAAMA,MAAN,CAAa;AACX;;;;;;;;;;;AAWAC,cAAYC,WAAZ,EAAyBC,KAAzB,EAAsE;AAAA,QAAtCC,OAAsC,uEAA5B,IAA4B;AAAA,QAAtBC,aAAsB,uEAAN,IAAM;AACpEC,UAAMJ,YAAYK,KAAlB,EAAyBC,QAAzB;AACAF,UAAMH,KAAN,EAAaM,MAAb;AACAH,UAAMF,OAAN,EAAeM,MAAMC,QAAN,CAAeC,OAAf,CAAf;AACAN,UAAMD,aAAN,EAAqBK,MAAMG,KAAN,CAAY,IAAZ,EAAkBC,MAAlB,CAArB;AAEA,SAAKC,YAAL,GAAoBb,WAApB;AACA,SAAKc,MAAL,GAAcb,KAAd;AACA,SAAKc,QAAL,GAAgBb,OAAhB;AACA,SAAKc,cAAL,GAAsBb,aAAtB;AACD;AAED;;;;;;;AAKAE,UAAQ;AACN,WAAO,KAAKQ,YAAL,CAAkBR,KAAlB,EAAP;AACD;AAEF;;;;;AAGCY,SAAO;AACL,QAAI,KAAKD,cAAT,EAAyB;AACvB,aAAO,KAAKA,cAAL,CAAoBC,IAApB,EAAP;AACD;AACF;AAED;;;;;;;AAKAhB,UAAQ;AACN,WAAO,KAAKa,MAAZ;AACD;AAED;;;;;;;AAKAZ,YAAU;AACR,WAAO,KAAKa,QAAZ;AACD;AAED;;;;;;;AAKA,MAAIf,WAAJ,GAAkB;AAChB,WAAO,KAAKa,YAAZ;AACD;AAED;;;;;;;AAKA,aAAWK,WAAX,GAAyB;AACvB,WAAO;AAAEb,aAAO,MAAM,EAAf;AAAmBc,eAAS,MAAM;AAAE,eAAO;AAAEF,gBAAM,MAAM;AAAd,SAAP;AAA8B,OAAlE;AAAoEA,YAAM,MAAM,CAAE;AAAlF,KAAP;AACD;;AA5EU;;AANbG,OAAOC,aAAP,CAqFevB,MArFf","sourcesContent":["/**\n * A Cursor represents a pointer to the search results. Since it's specific\n * to EasySearch it can also be used to check for valid return values.\n *\n * @type {Cursor}\n */\nclass Cursor {\n  /**\n   * Constructor\n   *\n   * @param {Mongo.Cursor} mongoCursor   Referenced mongo cursor\n   * @param {Number}       count         Count of all documents found\n   * @param {Boolean}      isReady       Cursor is ready\n   * @param {Object}       publishHandle Publish handle to stop if on client\n   *\n   * @constructor\n   *\n   */\n  constructor(mongoCursor, count, isReady = true, publishHandle = null) {\n    check(mongoCursor.fetch, Function);\n    check(count, Number);\n    check(isReady, Match.Optional(Boolean));\n    check(publishHandle, Match.OneOf(null, Object));\n\n    this._mongoCursor = mongoCursor;\n    this._count = count;\n    this._isReady = isReady;\n    this._publishHandle = publishHandle;\n  }\n\n  /**\n   * Fetch the search results.\n   *\n   * @returns {[Object]}\n   */\n  fetch() {\n    return this._mongoCursor.fetch();\n  }\n\n /**\n  * Stop the subscription handle associated with the cursor.\n  */\n  stop() {\n    if (this._publishHandle) {\n      return this._publishHandle.stop();\n    }\n  }\n\n  /**\n   * Return count of all documents found\n   *\n   * @returns {Number}\n   */\n  count() {\n    return this._count;\n  }\n\n  /**\n   * Return if the cursor is ready.\n   *\n   * @returns {Boolean}\n   */\n  isReady() {\n    return this._isReady;\n  }\n\n  /**\n   * Return the raw mongo cursor.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  get mongoCursor() {\n    return this._mongoCursor;\n  }\n\n  /**\n   * Return a fake empty cursor, without data.\n   *\n   * @returns {Object}\n   */\n  static get emptyCursor() {\n    return { fetch: () => [], observe: () => { return { stop: () => null }; }, stop: () => {} };\n  }\n}\n\nexport default Cursor;\n"]},"sourceType":"script","hash":"5f84e092b99aa57f09fdcc6c5bd0f1f291e5d9c9"}
