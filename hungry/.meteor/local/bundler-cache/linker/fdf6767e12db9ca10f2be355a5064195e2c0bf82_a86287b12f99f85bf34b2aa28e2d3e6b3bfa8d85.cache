[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar LZString = Package['nunohvidal:lz-string'].LZString;\n\n/* Package-scope variables */\nvar LocalPersist;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                  //\n// packages/jeffm_local-persist/local-persist.js                                                    //\n//                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                    //\nLocalPersist = function (collection, key, options) {\n  var self = this;\n  if (! (self instanceof LocalPersist))\n      throw new Error('use \"new\" to construct a LocalPersist');\n\n  self.stats = { added: 0, removed: 0, changed: 0, localStorage: false };\n  self.key = 'browcol__' + key;\n  self.col = collection;\n  self.compress = !! (options && options.compress);\n  self.migrate = !! (options && options.migrate);\n  self.maxDocuments = !! (options && options.maxDocuments && typeof options.maxDocuments === 'number') ? options.maxDocuments : 0;\n  self.storageFull = !! (options && options.storageFull && typeof options.storageFull === 'function') ? options.storageFull : function (document) {};\n  self.cur = [];\n\n  if(localStorage) {\n    self.cur = self.col.find({});\n    self.stats.localStorage = true;\n\n    persisters.push(self);\n\n    Meteor.startup(function () {\n      // load from storage\n      self._refresh(true);\n\n      self.cur.observe({\n        added: function (doc) {\n          if(self.maxDocuments > 0 && self.stats.added - self.stats.removed >= self.maxDocuments) {\n            self.storageFull(self.col, doc);\n          }\n\n          // get or initialize tracking list\n          var list = self._getList();\n\n          // store copy of document into local storage, if not already there\n          var key = self._makeDataKey(doc._id);\n          if(! self._get(key)) {\n            if(! self._put(key, doc))\n              return;\n          }\n\n          // add document id to tracking list and store\n          // if unable to store list due to storage being full,\n          // remove doc from storage and fire callback\n          if (! _.contains(list, doc._id)) {\n            list.push(doc._id);\n            if(! self._putList(list)) {\n              self._remove(key, doc);\n              this.storageFull(self.col, doc);\n              return;\n            }\n          }\n\n          ++self.stats.added;\n        },\n\n        removed: function (doc) {\n          var list = self._getList();\n\n          // if not in list, nothing to do\n          if(! _.contains(list, doc._id))\n            return;\n\n          // remove from list\n          list = _.without(list, doc._id);\n\n          // remove document copy from local storage\n          self._remove(self._makeDataKey(doc._id));\n\n          // store updated list\n          self._putList(list);\n\n          ++self.stats.removed;\n        },\n\n        changed: function (newDoc, oldDoc) {\n          // update document in local storage\n          self._put(self._makeDataKey(newDoc._id), newDoc);\n          ++self.stats.changed;\n        }\n      });\n    });\n  }\n};\n\nLocalPersist.prototype = {\n  constructor: LocalPersist,\n  _getStats: function () {\n    return this.stats;\n  },\n  _getKey: function () {\n    return this.key;\n  },\n  _makeDataKey: function (id) {\n    return this.key + '__' + id;\n  },\n  _put: function (key, doc) {\n    var rec = {};\n    rec.v = 2;\n    rec.c = this.compress ? 1 : 0;\n    rec.d = EJSON.stringify(doc);\n    rec.d = this.compress ? LZString.compressToUTF16(EJSON.stringify(doc)) : EJSON.stringify(doc);\n    try {\n      localStorage.setItem(key, EJSON.stringify(rec));\n    } catch (e) {\n      this.storageFull(this.col, doc);\n      return false;\n    }\n    return true;\n  },\n  _get: function (key) {\n    var val = localStorage.getItem(key);\n    if(val === null)\n      return null;\n    var rec = EJSON.parse(val);\n    if(rec.c === 1) {\n      if(rec.v === 1)\n        val = LZString.decompress(rec.d);\n      else\n        val = LZString.decompressFromUTF16(rec.d);\n    } else {\n      val = rec.d;\n    }\n    return EJSON.parse(val);\n  },\n  _remove: function (key) {\n    localStorage.removeItem(key);\n  },\n  _putList: function (list) {\n    if(list === null || list.length === 0) {\n      localStorage.removeItem(this.key);\n      return;\n    }\n\n    var val = EJSON.stringify(list);\n    try {\n      localStorage.setItem(this.key, val);\n    } catch (e) {\n      return false;\n    }\n    return true;\n  },\n  _getList: function () {\n    var val = localStorage.getItem(this.key);\n    return val === null ? [] : EJSON.parse(val);\n  },\n  _migrate: function (key) {\n    // migrate old Amplify.JS based data\n    // (attempts to be restartable)\n    var self = this;\n    var okey = '__amplify__' + key;\n    var dkey;\n    var olist;\n    var nkey;\n    var nlist;\n    return;\n\n    // get old list\n    var val = localStorage.getItem(okey);\n    if(val === null)\n      return;\n\n    val = EJSON.parse(val);\n    if(val && val.data)\n      olist = val.data;\n    else\n      return;\n\n    // get or initialise new list\n    nlist = self._getList();\n\n    // for each record in old list, migrate to new format.\n    // add to new list, saving list each time\n    _.each(olist, function (id) {\n      dkey = okey + '__' + id;\n      val = localStorage.getItem(dkey);\n      if(!! val) {\n        val = EJSON.parse(val);\n        if(!! val && !! val.data) {\n          nkey = key + '__' + id;\n          self._put(nkey, val.data);\n          nlist.push(id);\n          self._putList(nlist);\n          localStorage.removeItem(dkey);\n        }\n      }\n    });\n\n    // remove old list\n    localStorage.removeItem(okey);\n  },\n  _refresh: function (init) {\n    var self = this;\n\n    if(!! init && self.migrate)\n      self._migrate(self.key);\n\n    var list = self._getList();\n    var dels = [];\n\n    self.stats.added = 0;\n\n    if (!! list) {\n      var length = list.length;\n      list = _.filter(list, function (id) {\n        var doc = self._get(self._makeDataKey(id));\n        if(!! doc) {\n          var d = self.col.findOne({ _id: doc._id });\n          if(d)\n            self.col.update({ _id: d._id }, doc);\n          else\n            self.col.insert(doc);\n        }\n\n        return !! doc;\n      });\n\n      // if not initializing, check for deletes\n      if(! init) {\n        self.col.find({}).forEach(function (doc) {\n          if(! _.contains(list, doc._id))\n            dels.push(doc._id);\n        });\n\n        _.each(dels, function (id) {\n          self.col.remove({ _id: id });\n        });\n      }\n\n      // if initializing, save cleaned list (if changed)\n      if(init && length != list.length) {\n        self._putList(list);\n      }\n    }\n  }\n};\n\nvar persisters = [];\nvar lpTimer = null;\n\nfunction storageHandler (e) {\n  Meteor.clearTimeout(lpTimer);\n  lpTimer = Meteor.setTimeout(function () {\n    _.each(persisters, function (lp) {\n      lp._refresh(false);\n    });\n  }, 250);\n}\n\nMeteor.startup(function () {\n  if(window.addEventListener)\n  \twindow.addEventListener('storage', storageHandler, false);\n  else if(window.attachEvent)\n  \twindow.attachEvent('onstorage', storageHandler);\n});\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nPackage._define(\"jeffm:local-persist\", {\n  LocalPersist: LocalPersist\n});\n\n})();\n","servePath":"/packages/jeffm_local-persist.js"}]