[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar Random = Package.random.Random;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Mongo = Package.mongo.Mongo;\nvar Template = Package['peerlibrary:blaze-components'].Template;\nvar BlazeComponent = Package['peerlibrary:blaze-components'].BlazeComponent;\nvar BlazeComponentDebug = Package['peerlibrary:blaze-components'].BlazeComponentDebug;\nvar EasySearch = Package['easysearch:core'].EasySearch;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Blaze = Package.blaze.Blaze;\nvar UI = Package.blaze.UI;\nvar Handlebars = Package.blaze.Handlebars;\nvar Spacebars = Package.spacebars.Spacebars;\nvar HTML = Package.htmljs.HTML;\n\n/* Package-scope variables */\nvar BaseComponent, SingleIndexComponent;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"easysearch:components\":{\"lib\":{\"base.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/base.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = class BaseComponent extends BlazeComponent {\n  /**\n   * Return the name of the component.\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this.getData().name;\n  }\n  /**\n   * Return an array of properties that are reserved to the base component.\n   *\n   * @returns {String[]}\n   */\n\n\n  static get reserveredProperties() {\n    return ['index', 'indexes', 'name', 'attributes'];\n  }\n  /**\n   * Setup component on created.\n   */\n\n\n  onCreated() {\n    this.autorun(() => this.initializeBase());\n  }\n\n  initializeBase() {\n    let index = this.getData().index,\n        indexes = [index];\n\n    if (!index) {\n      indexes = this.getData().indexes;\n    }\n\n    if (_.isEmpty(indexes)) {\n      throw new Meteor.Error('no-index', 'Please provide an index for your component');\n    }\n\n    if (indexes.filter(index => index instanceof EasySearch.Index).length !== indexes.length) {\n      throw new Meteor.Error('invalid-configuration', \"Did not receive an index or an array of indexes: \\\"\".concat(indexes.toString(), \"\\\"\"));\n    }\n\n    this.indexes = indexes;\n    this.options = _.defaults({}, _.omit(this.getData(), ...BaseComponent.reserveredProperties), this.defaultOptions);\n    check(this.name, Match.Optional(String));\n    check(this.options, Object);\n    this.eachIndex(function (index, name) {\n      if (!index.getComponentDict(name)) {\n        index.registerComponent(name);\n      }\n    });\n  }\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n\n  get defaultOptions() {\n    return {};\n  }\n  /**\n   * @param {String} searchStr\n   *\n   * @returns {Boolean}\n   */\n\n\n  shouldShowDocuments(searchStr) {\n    return !this.getData().noDocumentsOnEmpty || 0 < searchStr.length;\n  }\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n\n\n  search(searchString) {\n    check(searchString, String);\n    const showDocuments = this.shouldShowDocuments(searchString);\n    this.eachIndex(function (index, name) {\n      index.getComponentDict(name).set('showDocuments', showDocuments);\n\n      if (showDocuments) {\n        index.getComponentMethods(name).search(searchString);\n      }\n    });\n  }\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n\n\n  getData() {\n    return this.data() || {};\n  }\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n\n\n  get dicts() {\n    return this.eachIndex((index, name) => {\n      return index.getComponentDict(name);\n    }, 'map');\n  }\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n\n\n  eachIndex(func) {\n    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'each';\n    let componentScope = this,\n        logic = this.getData().logic;\n\n    if (!_.isEmpty(logic)) {\n      method = 'OR' === logic ? 'some' : 'every';\n    }\n\n    return _[method](this.indexes, function (index) {\n      return func.apply(this, [index, componentScope.name]);\n    });\n  }\n\n};\nEasySearch.BaseComponent = BaseComponent;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"single-index.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/single-index.js                                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The SingleIndexComponent holds logic for components that only can use one index.\n *\n * @type {SingleIndexComponent}\n */\nSingleIndexComponent = class SingleIndexComponent extends BaseComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n\n    if (this.indexes.length > 1) {\n      throw new Meteor.Error('only-single-index', 'Can only specify one index');\n    }\n  }\n  /**\n   * Return the index\n   *\n   * @returns {Index}\n   */\n\n\n  get index() {\n    return _.first(this.indexes);\n  }\n  /**\n   * Return the dictionary.\n   *\n   * @returns {Object}\n   */\n\n\n  get dict() {\n    return _.first(this.dicts);\n  }\n\n};\nEasySearch.SingleIndexComponent = SingleIndexComponent;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"component-methods.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/component-methods.js                                                             //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nEasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: searchDefinition => {\n      dict.set('searchOptions', {\n        props: (dict.get('searchOptions') || {}).props\n      });\n      dict.set('searchDefinition', searchDefinition);\n      dict.set('stopPublication', true);\n    },\n\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: () => {\n      const searchDefinition = dict.get('searchDefinition') || '',\n            options = dict.get('searchOptions') || {},\n            showDocuments = dict.get('showDocuments');\n      check(options, Match.Optional(Object));\n\n      if (false === showDocuments) {\n        dict.set('count', 0);\n        dict.set('searching', false);\n        dict.set('limit', 0);\n        dict.set('skip', 0);\n        dict.set('currentCount', 0);\n        dict.set('stopPublication', false);\n        return EasySearch.Cursor.emptyCursor;\n      }\n\n      const cursor = index.search(searchDefinition, options),\n            searchOptions = index._getSearchOptions(options);\n\n      dict.set('count', cursor.count());\n      dict.set('searching', !cursor.isReady());\n      dict.set('limit', searchOptions.limit);\n      dict.set('skip', searchOptions.skip);\n      dict.set('currentCount', cursor.mongoCursor.count());\n      dict.set('stopPublication', false);\n      return cursor;\n    },\n\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: () => {\n      let searchDefinition = dict.get('searchDefinition');\n      return !searchDefinition || _.isString(searchDefinition) && 0 === searchDefinition.trim().length;\n    },\n\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: () => {\n      let count = dict.get('count'),\n          showDocuments = dict.get('showDocuments');\n      return false !== showDocuments && !dict.get('searching') && (!_.isNumber(count) || 0 === count);\n    },\n\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: () => {\n      return !!dict.get('searching');\n    },\n\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: () => {\n      return dict.get('currentCount') < dict.get('count');\n    },\n\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: count => {\n      check(count, Number);\n      let currentCount = dict.get('currentCount'),\n          options = dict.get('searchOptions') || {};\n      options.limit = currentCount + count;\n      dict.set('searchOptions', options);\n    },\n\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: page => {\n      check(page, Number);\n      let options = dict.get('searchOptions') || {},\n          limit = dict.get('limit');\n      options.skip = limit * (page - 1);\n      dict.set('currentPage', page);\n      dict.set('searchOptions', options);\n      dict.set('stopPublication', true);\n    },\n\n    /**\n     * Add custom properties for search.\n     */\n    addProps() {\n      let options = dict.get('searchOptions') || {};\n      options.props = options.props || {};\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (_.isObject(args[0])) {\n        options.props = _.extend(options.props, args[0]);\n      } else if (_.isString(args[0])) {\n        options.props[args[0]] = args[1];\n      }\n\n      dict.set('searchOptions', options);\n      this.paginate(1);\n    },\n\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps() {\n      let options = dict.get('searchOptions') || {};\n\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      if (!_.isEmpty(args)) {\n        options.props = _.omit(options.props, args) || {};\n      } else {\n        options.props = {};\n      }\n\n      dict.set('searchOptions', options);\n      this.paginate(1);\n    },\n\n    /**\n     * Reset the search.\n     */\n    reset() {\n      this.search('');\n      this.paginate(1);\n      dict.set('searchOptions', {});\n    }\n\n  };\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/core.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * Extend EasySearch.Index with component functionality.\n *\n * @type {Index}\n */\nEasySearch.Index = class Index extends EasySearch.Index {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super(...arguments);\n    this.components = {};\n  }\n  /**\n   * Return static default name for components.\n   *\n   * @returns {String}\n   */\n\n\n  static get COMPONENT_DEFAULT_NAME() {\n    return '__default';\n  }\n  /**\n   * Register a component on the index.\n   *\n   * @param {String} componentName Optional name of the component\n   */\n\n\n  registerComponent() {\n    let componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EasySearch.Index.COMPONENT_DEFAULT_NAME;\n    this.components[componentName] = new ReactiveDict(\"easySearchComponent_\".concat(this.config.name, \"_\").concat(componentName, \"_\").concat(Random.id()));\n  }\n  /**\n   * Get the reactive dictionary for a component.\n   *\n   * @param {String} componentName Optional name of the component\n   */\n\n\n  getComponentDict() {\n    let componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EasySearch.Index.COMPONENT_DEFAULT_NAME;\n    return this.components[componentName];\n  }\n  /**\n   * Get component methods that are useful for implementing search behaviour.\n   *\n   * @param componentName\n   */\n\n\n  getComponentMethods() {\n    let componentName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : EasySearch.Index.COMPONENT_DEFAULT_NAME;\n    let dict = this.getComponentDict(componentName);\n\n    if (!dict) {\n      throw new Meteor.Error('no-component', \"Component with name '\".concat(componentName, \"' not found\"));\n    }\n\n    return EasySearch._getComponentMethods(dict, this);\n  }\n\n};\n/**\n * Return true if the current page is valid.\n *\n * @param {Number} totalPagesLength Count of all pages available\n * @param {Number} currentPage      Current page to check\n *\n * @returns {boolean}\n */\n\nfunction isValidPage(totalPagesLength, currentPage) {\n  return currentPage <= totalPagesLength && currentPage > 0;\n}\n/**\n * Helper method to get the pages for pagination as an array.\n *\n * @param totalCount   Total count of results\n * @param pageCount    Count of results per page\n * @param currentPage  Current page\n * @param prevAndNext  True if Next and Previous buttons should appear\n * @param maxPages     Maximum count of pages to show\n *\n * @private\n *\n * @returns {Array}\n */\n\n\nEasySearch._getPagesForPagination = function (_ref) {\n  let {\n    totalCount,\n    pageCount,\n    currentPage,\n    prevAndNext,\n    maxPages\n  } = _ref;\n\n  let pages = _.range(1, Math.ceil(totalCount / pageCount) + 1),\n      pagesLength = pages.length;\n\n  if (!isValidPage(pagesLength, currentPage)) {\n    throw new Meteor.Error('invalid-page', 'Current page is not in valid range');\n  }\n\n  if (maxPages) {\n    let startSlice = currentPage > maxPages / 2 ? currentPage - 1 - Math.floor(maxPages / 2) : 0,\n        endSlice = startSlice + maxPages;\n\n    if (endSlice > pagesLength) {\n      pages = pages.slice(-maxPages);\n    } else {\n      pages = pages.slice(startSlice, startSlice + maxPages);\n    }\n  }\n\n  let pageData = _.map(pages, function (page) {\n    let isCurrentPage = page === currentPage;\n    return {\n      page,\n      content: page.toString(),\n      current: isCurrentPage,\n      disabled: isCurrentPage\n    };\n  });\n\n  if (prevAndNext) {\n    // Previous\n    let prevPage = isValidPage(pagesLength, currentPage - 1) ? currentPage - 1 : null;\n    pageData.unshift({\n      page: prevPage,\n      content: 'Prev',\n      current: false,\n      disabled: 1 === currentPage\n    }); // Next\n\n    let nextPage = isValidPage(pagesLength, currentPage + 1) ? currentPage + 1 : null;\n    pageData.push({\n      page: nextPage,\n      content: 'Next',\n      current: false,\n      disabled: null == nextPage || pagesLength + 1 === currentPage\n    });\n  }\n\n  return pageData;\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"input\":{\"template.input.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/input/template.input.js                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.Input\");\nTemplate[\"EasySearch.Input\"] = new Template(\"Template.EasySearch.Input\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"inputAttributes\"));\n  }));\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"input.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/input/input.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The InputComponent lets you search through configured indexes.\n *\n * @type {InputComponent}\n */\nEasySearch.InputComponent = class InputComponent extends BaseComponent {\n  /**\n   * Setup input onCreated.\n   */\n  onCreated() {\n    super.onCreated(...arguments);\n    this.search(this.inputAttributes().value); // create a reactive dependency to the cursor\n\n    this.debouncedSearch = _.debounce(searchString => {\n      searchString = searchString.trim();\n\n      if (this.searchString !== searchString) {\n        this.searchString = searchString;\n        this.eachIndex((index, name) => {\n          index.getComponentDict(name).set('currentPage', 1);\n        });\n        this.search(searchString);\n      }\n    }, this.options.timeout);\n  }\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n\n\n  events() {\n    return [{\n      'keyup input': function (e) {\n        if ('enter' == this.getData().event && e.keyCode != 13) {\n          return;\n        }\n\n        const value = $(e.target).val();\n\n        if (value.length >= this.options.charLimit) {\n          this.debouncedSearch($(e.target).val());\n        }\n      }\n    }];\n  }\n  /**\n   * Return the attributes to set on the input (class, id).\n   *\n   * @returns {Object}\n   */\n\n\n  inputAttributes() {\n    return _.defaults({}, this.getData().attributes, InputComponent.defaultAttributes);\n  }\n  /**\n   * Return the default attributes.\n   *\n   * @returns {Object}\n   */\n\n\n  static get defaultAttributes() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n\n  get defaultOptions() {\n    return {\n      timeout: 50,\n      charLimit: 0\n    };\n  }\n\n};\nEasySearch.InputComponent.register('EasySearch.Input');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"field-input\":{\"template.field-input.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/field-input/template.field-input.js                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.FieldInput\");\nTemplate[\"EasySearch.FieldInput\"] = new Template(\"Template.EasySearch.FieldInput\", (function() {\n  var view = this;\n  return HTML.INPUT(HTML.Attrs(function() {\n    return Spacebars.attrMustache(view.lookup(\"inputAttributes\"));\n  }));\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"field-input.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/field-input/field-input.js                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The FieldInputComponent lets you search through configured indexes for a specified fild.\n *\n * @type {FieldInputComponent}\n */\nEasySearch.FieldInputComponent = class FieldInputComponent extends EasySearch.InputComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n\n    if (_.isEmpty(this.getData().field)) {\n      throw new Meteor.Error('no-field', 'Please provide a field for your field input component');\n    }\n  }\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n\n\n  search(searchString) {\n    check(searchString, String);\n    this.eachIndex((index, name) => {\n      let searchDefinition = index.getComponentDict(name).get('searchDefinition') || {};\n\n      if (_.isString(searchDefinition)) {\n        throw new Meteor.Error('You can either EasySearch.FieldInput or EasySearch.Input');\n      }\n\n      if (this.options.field) {\n        searchDefinition[this.options.field] = searchString;\n        index.getComponentMethods(name).search(searchDefinition);\n      }\n    });\n  }\n\n};\nEasySearch.FieldInputComponent.register('EasySearch.FieldInput');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"each\":{\"template.each.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/each/template.each.js                                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.Each\");\nTemplate[\"EasySearch.Each\"] = new Template(\"Template.EasySearch.Each\", (function() {\n  var view = this;\n  return Blaze.Each(function() {\n    return Spacebars.call(view.lookup(\"doc\"));\n  }, function() {\n    return [ \"\\n      \", Blaze._InOuterTemplateScope(view, function() {\n      return Blaze._TemplateWith(function() {\n        return Spacebars.dataMustache(view.lookup(\"dataScope\"), view.lookup(\".\"), view.lookup(\"@index\"));\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateContentBlock);\n        });\n      });\n    }), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"each.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/each/each.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The EachComponent allows to loop through the search results found.\n *\n * @type {EachComponent}\n */\nEasySearch.EachComponent = class EachComponent extends SingleIndexComponent {\n  /**\n   * Return the mongo cursor for the search.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  doc() {\n    const stopPublication = this.index.getComponentDict(this.name).get('stopPublication');\n    this.cursor && stopPublication && this.cursor.stop();\n    this.cursor = this.index.getComponentMethods(this.name).getCursor();\n    return this.cursor.mongoCursor;\n  }\n  /**\n   * Return the datascope for each document.\n   *\n   * @param {Object} scope\n   * @param {Number} index\n   *\n   * @returns {Object}\n   */\n\n\n  dataScope(scope, index) {\n    scope['@index'] = index;\n    return scope;\n  }\n\n};\nEasySearch.EachComponent.register('EasySearch.Each');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"if-input-empty\":{\"template.if-input-empty.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-input-empty/template.if-input-empty.js                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.IfInputEmpty\");\nTemplate[\"EasySearch.IfInputEmpty\"] = new Template(\"Template.EasySearch.IfInputEmpty\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"inputEmpty\"));\n  }, function() {\n    return [ \"\\n        \", Blaze._InOuterTemplateScope(view, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(view.templateContentBlock);\n      });\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.templateElseBlock);\n    }, function() {\n      return [ \"\\n            \", Blaze._InOuterTemplateScope(view, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateElseBlock);\n        });\n      }), \"\\n        \" ];\n    }), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"if-input-empty.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-input-empty/if-input-empty.js                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The IfInputEmptyComponent lets you display content when the input is empty.\n *\n * @type {IfInputEmptyComponent}\n */\nEasySearch.IfInputEmptyComponent = class IfInputEmptyComponent extends BaseComponent {\n  /**\n   * Return true if the input is empty.\n   *\n   * @returns {boolean}\n   */\n  inputEmpty() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).searchIsEmpty();\n    }, 'every');\n  }\n\n};\nEasySearch.IfInputEmptyComponent.register('EasySearch.IfInputEmpty');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"if-no-results\":{\"template.if-no-results.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-no-results/template.if-no-results.js                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.IfNoResults\");\nTemplate[\"EasySearch.IfNoResults\"] = new Template(\"Template.EasySearch.IfNoResults\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"noResults\"));\n  }, function() {\n    return [ \"\\n        \", Blaze._InOuterTemplateScope(view, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(view.templateContentBlock);\n      });\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.templateElseBlock);\n    }, function() {\n      return [ \"\\n            \", Blaze._InOuterTemplateScope(view, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateElseBlock);\n        });\n      }), \"\\n        \" ];\n    }), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"if-no-results.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-no-results/if-no-results.js                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The IfNoResultsComponent lets you display content when there are no results.\n *\n * @type {IfNoResultsComponent}\n */\nEasySearch.IfNoResultsComponent = class IfNoResultsComponent extends BaseComponent {\n  /**\n   * Return true if there are no results.\n   *\n   * @returns {boolean}\n   */\n  noResults() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).hasNoResults();\n    }, 'every');\n  }\n\n};\nEasySearch.IfNoResultsComponent.register('EasySearch.IfNoResults');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"if-searching\":{\"template.if-searching.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-searching/template.if-searching.js                                            //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.IfSearching\");\nTemplate[\"EasySearch.IfSearching\"] = new Template(\"Template.EasySearch.IfSearching\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"searching\"));\n  }, function() {\n    return [ \"\\n        \", Blaze._InOuterTemplateScope(view, function() {\n      return Spacebars.include(function() {\n        return Spacebars.call(view.templateContentBlock);\n      });\n    }), \"\\n    \" ];\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.templateElseBlock);\n    }, function() {\n      return [ \"\\n            \", Blaze._InOuterTemplateScope(view, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(view.templateElseBlock);\n        });\n      }), \"\\n        \" ];\n    }), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"if-searching.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/if-searching/if-searching.js                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The IfSearchingComponent lets you display content when the component is being searched.\n *\n * @type {IfSearchingComponent}\n */\nEasySearch.IfSearchingComponent = class IfSearchingComponent extends BaseComponent {\n  /**\n   * Return true if the component is being searched.\n   *\n   * @returns {boolean}\n   */\n  searching() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).isSearching();\n    }, 'every');\n  }\n\n};\nEasySearch.IfSearchingComponent.register('EasySearch.IfSearching');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"load-more\":{\"template.load-more.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/load-more/template.load-more.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.LoadMore\");\nTemplate[\"EasySearch.LoadMore\"] = new Template(\"Template.EasySearch.LoadMore\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"moreDocuments\"));\n  }, function() {\n    return [ \"\\n        \", HTML.BUTTON(HTML.Attrs(function() {\n      return Spacebars.attrMustache(view.lookup(\"attributes\"));\n    }), Blaze.View(\"lookup:content\", function() {\n      return Spacebars.mustache(view.lookup(\"content\"));\n    })), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"load-more.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/load-more/load-more.js                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The LoadMoreComponent lets you load more documents through a button.\n *\n * @type {LoadMoreComponent}\n */\nEasySearch.LoadMoreComponent = class LoadMoreComponent extends SingleIndexComponent {\n  /**\n   * Load more documents.\n   */\n  loadMore() {\n    this.index.getComponentMethods(this.name).loadMore(this.options.count);\n  }\n  /**\n   * Content of the component.\n   *\n   * @returns string\n   */\n\n\n  content() {\n    return this.options.content;\n  }\n  /**\n   * Attributes of the component.\n   *\n   * @returns string\n   */\n\n\n  attributes() {\n    return this.getData().attributes || {};\n  }\n  /**\n   * Return true if there are more documents to load.\n   *\n   * @returns {Boolean}\n   */\n\n\n  moreDocuments() {\n    return this.index.getComponentMethods(this.name).hasMoreDocuments();\n  }\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n\n\n  events() {\n    return [{\n      'click button': function () {\n        this.loadMore();\n      }\n    }];\n  }\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n\n  get defaultOptions() {\n    return {\n      content: 'Load more',\n      count: 10\n    };\n  }\n\n};\nEasySearch.LoadMoreComponent.register('EasySearch.LoadMore');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"pagination\":{\"template.pagination.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/pagination/template.pagination.js                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n\nTemplate.__checkName(\"EasySearch.Pagination\");\nTemplate[\"EasySearch.Pagination\"] = new Template(\"Template.EasySearch.Pagination\", (function() {\n  var view = this;\n  return Blaze.If(function() {\n    return Spacebars.call(view.lookup(\"moreDocuments\"));\n  }, function() {\n    return [ \"\\n        \", Blaze.If(function() {\n      return Spacebars.call(view.lookup(\"customRenderPagination\"));\n    }, function() {\n      return [ \"\\n            \", Blaze._TemplateWith(function() {\n        return {\n          template: Spacebars.call(view.lookup(\"customRenderPagination\"))\n        };\n      }, function() {\n        return Spacebars.include(function() {\n          return Spacebars.call(Template.__dynamic);\n        });\n      }), \"\\n        \" ];\n    }, function() {\n      return [ \"\\n            \", HTML.UL({\n        \"class\": \"pagination\"\n      }, \"\\n                \", Blaze.Each(function() {\n        return Spacebars.call(view.lookup(\"page\"));\n      }, function() {\n        return [ \"\\n                    \", HTML.LI({\n          \"class\": function() {\n            return [ \"page \", Spacebars.mustache(view.lookup(\"pageClasses\"), view.lookup(\".\")) ];\n          }\n        }, \"\\n                        \", Blaze.View(\"lookup:content\", function() {\n          return Spacebars.mustache(view.lookup(\"content\"));\n        }), \"\\n                    \"), \"\\n                \" ];\n      }), \"\\n            \"), \"\\n        \" ];\n    }), \"\\n    \" ];\n  });\n}));\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"pagination.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/pagination/pagination.js                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**\n * The PaginationComponent lets you paginate through documents.\n *\n * @type {PaginationComponent}\n */\nEasySearch.PaginationComponent = class PaginationComponent extends SingleIndexComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n    this.index.getComponentMethods(this.name).paginate(1);\n  }\n  /**\n   * Get pages for displaying the pagination.\n   *\n   * @returns {Array}\n   */\n\n\n  page() {\n    let totalCount = this.dict.get('count'),\n        pageCount = this.dict.get('limit'),\n        currentPage = this.dict.get('currentPage'),\n        maxPages = this.options.maxPages,\n        prevAndNext = this.options.prevAndNext;\n\n    if (!pageCount || !totalCount) {\n      return [];\n    }\n\n    return this.options.transformPages(EasySearch._getPagesForPagination({\n      totalCount,\n      pageCount,\n      currentPage,\n      maxPages,\n      prevAndNext\n    }));\n  }\n\n  customRenderPagination() {\n    return this.getData().customRenderPagination;\n  }\n  /**\n   * Paginate documents.\n   */\n\n\n  paginate(page) {\n    check(page, Number);\n    this.index.getComponentMethods(this.name).paginate(page);\n  }\n  /**\n   * Return page classes.\n   *\n   * @param {Object} data Data for the current page\n   *\n   * @returns {String}\n   */\n\n\n  pageClasses(data) {\n    return \"\".concat(data.disabled ? 'disabled' : '', \" \").concat(data.current ? 'current' : '').trim();\n  }\n  /**\n   * Return true if there are more documents to load.\n   *\n   * @returns {Boolean}\n   */\n\n\n  moreDocuments() {\n    return this.index.getComponentMethods(this.name).hasMoreDocuments();\n  }\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n\n\n  events() {\n    return [{\n      'click .page:not(.disabled)': function (e) {\n        let currentPage = this.currentData().page;\n        this.dict.set('currentPage', currentPage);\n        this.paginate(currentPage);\n        e.preventDefault();\n      }\n    }];\n  }\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n\n\n  get defaultOptions() {\n    return {\n      prevAndNext: true,\n      maxPages: null,\n      transformPages: pages => pages\n    };\n  }\n\n};\nEasySearch.PaginationComponent.register('EasySearch.Pagination');\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/easysearch_components/lib/main.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  Index: () => Index,\n  SingleIndexComponent: () => SingleIndexComponent,\n  BaseComponent: () => BaseComponent,\n  FieldInputComponent: () => FieldInputComponent,\n  EachComponent: () => EachComponent,\n  IfInputEmptyComponent: () => IfInputEmptyComponent,\n  IfNoResultsComponent: () => IfNoResultsComponent,\n  IfSearchingComponent: () => IfSearchingComponent,\n  InputComponent: () => InputComponent,\n  LoadMoreComponent: () => LoadMoreComponent,\n  PaginationComponent: () => PaginationComponent\n});\nconst {\n  Index,\n  SingleIndexComponent,\n  BaseComponent,\n  FieldInputComponent,\n  EachComponent,\n  IfInputEmptyComponent,\n  IfNoResultsComponent,\n  IfSearchingComponent,\n  InputComponent,\n  LoadMoreComponent,\n  PaginationComponent\n} = EasySearch;\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".html\"\n  ]\n});\nrequire(\"/node_modules/meteor/easysearch:components/lib/base.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/single-index.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/component-methods.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/core.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/input/template.input.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/input/input.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/field-input/template.field-input.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/field-input/field-input.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/each/template.each.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/each/each.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-input-empty/template.if-input-empty.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-input-empty/if-input-empty.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-no-results/template.if-no-results.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-no-results/if-no-results.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-searching/template.if-searching.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/if-searching/if-searching.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/load-more/template.load-more.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/load-more/load-more.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/pagination/template.pagination.js\");\nrequire(\"/node_modules/meteor/easysearch:components/lib/pagination/pagination.js\");\nvar exports = require(\"/node_modules/meteor/easysearch:components/lib/main.js\");\n\n/* Exports */\nPackage._define(\"easysearch:components\", exports, {\n  EasySearch: EasySearch\n});\n\n})();\n","servePath":"/packages/easysearch_components.js","sourceMap":{"version":3,"sources":["packages/easysearch:components/lib/base.js","packages/easysearch:components/lib/single-index.js","packages/easysearch:components/lib/component-methods.js","packages/easysearch:components/lib/core.js","packages/easysearch:components/lib/input/input.js","packages/easysearch:components/lib/field-input/field-input.js","packages/easysearch:components/lib/each/each.js","packages/easysearch:components/lib/if-input-empty/if-input-empty.js","packages/easysearch:components/lib/if-no-results/if-no-results.js","packages/easysearch:components/lib/if-searching/if-searching.js","packages/easysearch:components/lib/load-more/load-more.js","packages/easysearch:components/lib/pagination/pagination.js","packages/easysearch:components/lib/main.js"],"names":["BaseComponent","BlazeComponent","name","getData","reserveredProperties","onCreated","autorun","initializeBase","index","indexes","_","isEmpty","Meteor","Error","filter","EasySearch","Index","length","toString","options","defaults","omit","defaultOptions","check","Match","Optional","String","Object","eachIndex","getComponentDict","registerComponent","shouldShowDocuments","searchStr","noDocumentsOnEmpty","search","searchString","showDocuments","set","getComponentMethods","data","dicts","func","method","componentScope","logic","apply","SingleIndexComponent","first","dict","_getComponentMethods","searchDefinition","props","get","getCursor","Cursor","emptyCursor","cursor","searchOptions","_getSearchOptions","count","isReady","limit","skip","mongoCursor","searchIsEmpty","isString","trim","hasNoResults","isNumber","isSearching","hasMoreDocuments","loadMore","Number","currentCount","paginate","page","addProps","args","isObject","extend","removeProps","reset","constructor","arguments","components","COMPONENT_DEFAULT_NAME","componentName","ReactiveDict","config","Random","id","isValidPage","totalPagesLength","currentPage","_getPagesForPagination","totalCount","pageCount","prevAndNext","maxPages","pages","range","Math","ceil","pagesLength","startSlice","floor","endSlice","slice","pageData","map","isCurrentPage","content","current","disabled","prevPage","unshift","nextPage","push","InputComponent","inputAttributes","value","debouncedSearch","debounce","timeout","events","e","event","keyCode","$","target","val","charLimit","attributes","defaultAttributes","type","register","FieldInputComponent","field","EachComponent","doc","stopPublication","stop","dataScope","scope","IfInputEmptyComponent","inputEmpty","IfNoResultsComponent","noResults","IfSearchingComponent","searching","LoadMoreComponent","moreDocuments","PaginationComponent","transformPages","customRenderPagination","pageClasses","currentData","preventDefault","module","export"],"mappings":"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","file":"/packages/easysearch_components.js","sourcesContent":["/**\n * The BaseComponent holds the base logic for EasySearch Components.\n *\n * @type {BaseComponent}\n */\nBaseComponent = class BaseComponent extends BlazeComponent {\n  /**\n   * Return the name of the component.\n   *\n   * @returns {String}\n   */\n  get name() {\n    return this.getData().name;\n  }\n\n  /**\n   * Return an array of properties that are reserved to the base component.\n   *\n   * @returns {String[]}\n   */\n  static get reserveredProperties() {\n    return ['index', 'indexes', 'name', 'attributes'];\n  }\n\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    this.autorun(() => this.initializeBase());\n  }\n\n  initializeBase() {\n    let index = this.getData().index,\n      indexes = [index];\n\n    if (!index) {\n      indexes = this.getData().indexes;\n    }\n\n    if (_.isEmpty(indexes)) {\n      throw new Meteor.Error('no-index', 'Please provide an index for your component');\n    }\n\n    if (indexes.filter((index) => index instanceof EasySearch.Index).length !== indexes.length) {\n      throw new Meteor.Error(\n        'invalid-configuration',\n        `Did not receive an index or an array of indexes: \"${indexes.toString()}\"`\n      );\n    }\n\n    this.indexes = indexes;\n    this.options = _.defaults({}, _.omit(this.getData(), ...BaseComponent.reserveredProperties), this.defaultOptions);\n\n    check(this.name, Match.Optional(String));\n    check(this.options, Object);\n\n    this.eachIndex(function (index, name) {\n      if (!index.getComponentDict(name)) {\n        index.registerComponent(name);\n      }\n    });\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions () {\n    return {};\n  }\n\n  /**\n   * @param {String} searchStr\n   *\n   * @returns {Boolean}\n   */\n  shouldShowDocuments(searchStr) {\n    return !this.getData().noDocumentsOnEmpty || 0 < searchStr.length;\n  }\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n  search(searchString) {\n    check(searchString, String);\n\n    const showDocuments = this.shouldShowDocuments(searchString);\n\n    this.eachIndex(function (index, name) {\n      index.getComponentDict(name).set('showDocuments', showDocuments);\n\n      if (showDocuments) {\n        index.getComponentMethods(name).search(searchString);\n      }\n    });\n  }\n\n  /**\n   * Return the data.\n   *\n   * @returns {Object}\n   */\n  getData() {\n    return (this.data() || {});\n  }\n\n  /**\n   * Return the dictionaries.\n   *\n   * @returns {Object}\n   */\n  get dicts() {\n    return this.eachIndex((index, name) => {\n      return index.getComponentDict(name);\n    }, 'map');\n  }\n\n  /**\n   * Loop through each index and apply a function\n   *\n   * @param {Function} func   Function to run\n   * @param {String}   method Lodash method name\n   *\n   * @return mixed\n   */\n  eachIndex(func, method = 'each') {\n    let componentScope = this,\n      logic = this.getData().logic;\n\n    if (!_.isEmpty(logic)) {\n      method = 'OR' === logic ? 'some' : 'every';\n    }\n\n    return _[method](this.indexes, function (index) {\n      return func.apply(this, [index, componentScope.name]);\n    });\n  }\n};\n\nEasySearch.BaseComponent = BaseComponent;\n","/**\n * The SingleIndexComponent holds logic for components that only can use one index.\n *\n * @type {SingleIndexComponent}\n */\nSingleIndexComponent = class SingleIndexComponent extends BaseComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n\n    if (this.indexes.length > 1) {\n      throw new Meteor.Error('only-single-index', 'Can only specify one index');\n    }\n  }\n\n  /**\n   * Return the index\n   *\n   * @returns {Index}\n   */\n  get index() {\n    return _.first(this.indexes);\n  }\n\n  /**\n   * Return the dictionary.\n   *\n   * @returns {Object}\n   */\n  get dict() {\n    return _.first(this.dicts);\n  }\n};\n\nEasySearch.SingleIndexComponent = SingleIndexComponent;\n","EasySearch._getComponentMethods = function (dict, index) {\n  return {\n    /**\n     * Search a component for the given search string.\n     *\n     * @param {Object|String} searchDefinition Search definition\n     */\n    search: (searchDefinition) => {\n      dict.set('searchOptions', {\n        props: (dict.get('searchOptions') || {}).props\n      });\n\n      dict.set('searchDefinition', searchDefinition);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Return the EasySearch.Cursor for the current search.\n     *\n     * @returns {Cursor}\n     */\n    getCursor: () => {\n      const searchDefinition = dict.get('searchDefinition') || '',\n        options = dict.get('searchOptions') || {},\n        showDocuments = dict.get('showDocuments');\n\n      check(options, Match.Optional(Object));\n\n      if (false === showDocuments) {\n        dict.set('count', 0);\n        dict.set('searching', false);\n        dict.set('limit', 0);\n        dict.set('skip', 0);\n        dict.set('currentCount', 0);\n        dict.set('stopPublication', false);\n\n        return EasySearch.Cursor.emptyCursor;\n      }\n\n      const cursor = index.search(searchDefinition, options),\n        searchOptions = index._getSearchOptions(options);\n\n      dict.set('count', cursor.count());\n      dict.set('searching', !cursor.isReady());\n      dict.set('limit', searchOptions.limit);\n      dict.set('skip', searchOptions.skip);\n      dict.set('currentCount', cursor.mongoCursor.count());\n      dict.set('stopPublication', false);\n\n      return cursor;\n    },\n    /**\n     * Return true if the current search string is empty.\n     *\n     * @returns {boolean}\n     */\n    searchIsEmpty: () => {\n      let searchDefinition = dict.get('searchDefinition');\n\n      return !searchDefinition || (_.isString(searchDefinition) && 0 === searchDefinition.trim().length);\n    },\n    /**\n     * Return true if the component has no results.\n     *\n     * @returns {boolean}\n     */\n    hasNoResults: () => {\n      let count = dict.get('count'),\n        showDocuments = dict.get('showDocuments');\n\n      return false !== showDocuments\n        && !dict.get('searching')\n        && (!_.isNumber(count) || 0 === count);\n    },\n    /**\n     * Return true if the component is being searched.\n     *\n     * @returns {boolean}\n     */\n    isSearching: () => {\n      return !!dict.get('searching');\n    },\n    /**\n     * Return true if the component has more documents than displayed right now.\n     *\n     * @returns {boolean}\n     */\n    hasMoreDocuments: () => {\n      return dict.get('currentCount') < dict.get('count');\n    },\n    /**\n     * Load more documents for the component.\n     *\n     * @param {Number} count Count of docs\n     */\n    loadMore: (count) => {\n      check(count, Number);\n\n      let currentCount = dict.get('currentCount'),\n        options = dict.get('searchOptions') || {};\n\n      options.limit = currentCount + count;\n      dict.set('searchOptions', options);\n    },\n    /**\n     * Paginate through documents for the given page.\n     *\n     * @param {Number} page Page number\n     */\n    paginate: (page) => {\n      check(page, Number);\n\n      let options = dict.get('searchOptions') || {},\n        limit = dict.get('limit');\n\n      options.skip = limit * (page - 1);\n      dict.set('currentPage', page);\n      dict.set('searchOptions', options);\n      dict.set('stopPublication', true);\n    },\n    /**\n     * Add custom properties for search.\n     */\n    addProps(...args) {\n      let options = dict.get('searchOptions') || {};\n\n      options.props = options.props || {};\n\n      if (_.isObject(args[0])) {\n        options.props = _.extend(options.props, args[0]);\n      } else if (_.isString(args[0])) {\n        options.props[args[0]] = args[1];\n      }\n\n      dict.set('searchOptions', options);\n      this.paginate(1);\n    },\n    /**\n     * Remove custom properties for search.\n     */\n    removeProps(...args) {\n      let options = dict.get('searchOptions') || {};\n\n      if (!_.isEmpty(args)) {\n        options.props = _.omit(options.props, args) || {};\n      } else {\n        options.props = {};\n      }\n\n      dict.set('searchOptions', options);\n      this.paginate(1);\n    },\n    /**\n     * Reset the search.\n     */\n    reset() {\n      this.search('');\n      this.paginate(1);\n      dict.set('searchOptions', {});\n    },\n  };\n};\n","/**\n * Extend EasySearch.Index with component functionality.\n *\n * @type {Index}\n */\nEasySearch.Index = class Index extends EasySearch.Index {\n  /**\n   * Constructor.\n   */\n  constructor() {\n    super(...arguments);\n    this.components = {};\n  }\n\n  /**\n   * Return static default name for components.\n   *\n   * @returns {String}\n   */\n  static get COMPONENT_DEFAULT_NAME() {\n    return'__default';\n  }\n\n  /**\n   * Register a component on the index.\n   *\n   * @param {String} componentName Optional name of the component\n   */\n  registerComponent(componentName = EasySearch.Index.COMPONENT_DEFAULT_NAME) {\n    this.components[componentName] = new ReactiveDict(\n      `easySearchComponent_${this.config.name}_${componentName}_${Random.id()}`\n    );\n  }\n\n  /**\n   * Get the reactive dictionary for a component.\n   *\n   * @param {String} componentName Optional name of the component\n   */\n  getComponentDict(componentName = EasySearch.Index.COMPONENT_DEFAULT_NAME) {\n    return this.components[componentName];\n  }\n\n  /**\n   * Get component methods that are useful for implementing search behaviour.\n   *\n   * @param componentName\n   */\n  getComponentMethods(componentName = EasySearch.Index.COMPONENT_DEFAULT_NAME) {\n    let dict = this.getComponentDict(componentName);\n\n    if (!dict) {\n      throw new Meteor.Error('no-component', `Component with name '${componentName}' not found`);\n    }\n\n    return EasySearch._getComponentMethods(dict, this);\n  }\n};\n\n/**\n * Return true if the current page is valid.\n *\n * @param {Number} totalPagesLength Count of all pages available\n * @param {Number} currentPage      Current page to check\n *\n * @returns {boolean}\n */\nfunction isValidPage(totalPagesLength, currentPage) {\n  return currentPage <= totalPagesLength && currentPage > 0;\n}\n\n/**\n * Helper method to get the pages for pagination as an array.\n *\n * @param totalCount   Total count of results\n * @param pageCount    Count of results per page\n * @param currentPage  Current page\n * @param prevAndNext  True if Next and Previous buttons should appear\n * @param maxPages     Maximum count of pages to show\n *\n * @private\n *\n * @returns {Array}\n */\nEasySearch._getPagesForPagination = function ({totalCount, pageCount, currentPage, prevAndNext, maxPages}) {\n  let pages = _.range(1, Math.ceil(totalCount / pageCount) + 1),\n    pagesLength = pages.length;\n\n  if (!isValidPage(pagesLength, currentPage)) {\n    throw new Meteor.Error('invalid-page', 'Current page is not in valid range');\n  }\n\n  if (maxPages) {\n    let startSlice = (currentPage > (maxPages / 2) ? (currentPage - 1) - Math.floor(maxPages / 2) : 0),\n      endSlice = startSlice + maxPages;\n\n    if (endSlice > pagesLength) {\n      pages = pages.slice(-maxPages);\n    } else {\n      pages = pages.slice(startSlice, startSlice + maxPages);\n    }\n  }\n\n  let pageData = _.map(pages, function (page) {\n    let isCurrentPage = page === currentPage;\n    return { page, content: page.toString(), current: isCurrentPage, disabled: isCurrentPage };\n  });\n\n  if (prevAndNext) {\n    // Previous\n    let prevPage = isValidPage(pagesLength, currentPage - 1) ? currentPage - 1 : null;\n    pageData.unshift({ page: prevPage, content: 'Prev', current: false, disabled: 1 === currentPage });\n    // Next\n    let nextPage = isValidPage(pagesLength, currentPage + 1) ? currentPage + 1 : null;\n    pageData.push(\n      { page: nextPage, content: 'Next', current: false, disabled: null == nextPage || pagesLength + 1 === currentPage }\n    );\n  }\n\n  return pageData;\n};\n","/**\n * The InputComponent lets you search through configured indexes.\n *\n * @type {InputComponent}\n */\nEasySearch.InputComponent = class InputComponent extends BaseComponent {\n  /**\n   * Setup input onCreated.\n   */\n  onCreated() {\n    super.onCreated(...arguments);\n\n    this.search(this.inputAttributes().value);\n\n    // create a reactive dependency to the cursor\n    this.debouncedSearch = _.debounce((searchString) => {\n      searchString = searchString.trim();\n\n      if (this.searchString !== searchString) {\n        this.searchString = searchString;\n\n        this.eachIndex((index, name) => {\n          index.getComponentDict(name).set('currentPage', 1);\n        });\n\n        this.search(searchString);\n      }\n\n    }, this.options.timeout);\n  }\n\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n  events() {\n    return [{\n      'keyup input' : function (e) {\n        if ('enter' == this.getData().event && e.keyCode != 13) {\n          return;\n        }\n\n        const value = $(e.target).val();\n\n        if (value.length >= this.options.charLimit) {\n          this.debouncedSearch($(e.target).val());\n        }\n      }\n    }];\n  }\n\n  /**\n   * Return the attributes to set on the input (class, id).\n   *\n   * @returns {Object}\n   */\n  inputAttributes() {\n    return _.defaults({}, this.getData().attributes, InputComponent.defaultAttributes);\n  }\n\n  /**\n   * Return the default attributes.\n   *\n   * @returns {Object}\n   */\n  static get defaultAttributes() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions() {\n    return {\n      timeout: 50,\n      charLimit: 0\n    };\n  }\n};\n\nEasySearch.InputComponent.register('EasySearch.Input');\n","/**\n * The FieldInputComponent lets you search through configured indexes for a specified fild.\n *\n * @type {FieldInputComponent}\n */\nEasySearch.FieldInputComponent = class FieldInputComponent extends EasySearch.InputComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n\n    if (_.isEmpty(this.getData().field)) {\n      throw new Meteor.Error('no-field', 'Please provide a field for your field input component');\n    }\n  }\n\n  /**\n   * Search the component.\n   *\n   * @param {String} searchString String to search for\n   */\n  search(searchString) {\n    check(searchString, String);\n\n    this.eachIndex((index, name) => {\n      let searchDefinition = index.getComponentDict(name).get('searchDefinition') || {};\n\n      if (_.isString(searchDefinition)) {\n        throw new Meteor.Error('You can either EasySearch.FieldInput or EasySearch.Input');\n      }\n\n      if (this.options.field) {\n        searchDefinition[this.options.field] = searchString;\n        index.getComponentMethods(name).search(searchDefinition);\n      }\n    });\n  }\n};\n\nEasySearch.FieldInputComponent.register('EasySearch.FieldInput');\n","/**\n * The EachComponent allows to loop through the search results found.\n *\n * @type {EachComponent}\n */\nEasySearch.EachComponent = class EachComponent extends SingleIndexComponent {\n  /**\n   * Return the mongo cursor for the search.\n   *\n   * @returns {Mongo.Cursor}\n   */\n  doc() {\n    const stopPublication = this.index\n      .getComponentDict(this.name)\n      .get('stopPublication')\n    ;\n\n    this.cursor && stopPublication && this.cursor.stop();\n\n    this.cursor = this.index\n        .getComponentMethods(this.name)\n        .getCursor()\n    ;\n\n    return this.cursor.mongoCursor;\n  }\n\n  /**\n   * Return the datascope for each document.\n   *\n   * @param {Object} scope\n   * @param {Number} index\n   *\n   * @returns {Object}\n   */\n  dataScope(scope, index) {\n    scope['@index'] = index\n\n    return scope\n  }\n};\n\nEasySearch.EachComponent.register('EasySearch.Each');\n","/**\n * The IfInputEmptyComponent lets you display content when the input is empty.\n *\n * @type {IfInputEmptyComponent}\n */\nEasySearch.IfInputEmptyComponent = class IfInputEmptyComponent extends BaseComponent {\n  /**\n   * Return true if the input is empty.\n   *\n   * @returns {boolean}\n   */\n  inputEmpty() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).searchIsEmpty();\n    }, 'every');\n  }\n};\n\nEasySearch.IfInputEmptyComponent.register('EasySearch.IfInputEmpty');\n","/**\n * The IfNoResultsComponent lets you display content when there are no results.\n *\n * @type {IfNoResultsComponent}\n */\nEasySearch.IfNoResultsComponent = class IfNoResultsComponent extends BaseComponent {\n  /**\n   * Return true if there are no results.\n   *\n   * @returns {boolean}\n   */\n  noResults() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).hasNoResults();\n    }, 'every');\n  }\n};\n\nEasySearch.IfNoResultsComponent.register('EasySearch.IfNoResults');\n","/**\n * The IfSearchingComponent lets you display content when the component is being searched.\n *\n * @type {IfSearchingComponent}\n */\nEasySearch.IfSearchingComponent = class IfSearchingComponent extends BaseComponent {\n  /**\n   * Return true if the component is being searched.\n   *\n   * @returns {boolean}\n   */\n  searching() {\n    return !!this.eachIndex(function (index, name) {\n      return index.getComponentMethods(name).isSearching();\n    }, 'every');\n  }\n};\n\nEasySearch.IfSearchingComponent.register('EasySearch.IfSearching');\n","/**\n * The LoadMoreComponent lets you load more documents through a button.\n *\n * @type {LoadMoreComponent}\n */\nEasySearch.LoadMoreComponent = class LoadMoreComponent extends SingleIndexComponent {\n  /**\n   * Load more documents.\n   */\n  loadMore() {\n    this.index\n      .getComponentMethods(this.name)\n      .loadMore(this.options.count)\n    ;\n  }\n\n  /**\n   * Content of the component.\n   *\n   * @returns string\n   */\n  content() {\n    return this.options.content;\n  }\n\n  /**\n   * Attributes of the component.\n   *\n   * @returns string\n   */\n  attributes() {\n    return this.getData().attributes || {};\n  }\n\n  /**\n   * Return true if there are more documents to load.\n   *\n   * @returns {Boolean}\n   */\n  moreDocuments() {\n    return this.index.getComponentMethods(this.name).hasMoreDocuments();\n  }\n\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n  events() {\n    return [{\n      'click button' : function () {\n        this.loadMore();\n      }\n    }];\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions() {\n    return {\n      content: 'Load more',\n      count: 10\n    };\n  }\n};\n\nEasySearch.LoadMoreComponent.register('EasySearch.LoadMore');\n","/**\n * The PaginationComponent lets you paginate through documents.\n *\n * @type {PaginationComponent}\n */\nEasySearch.PaginationComponent = class PaginationComponent extends SingleIndexComponent {\n  /**\n   * Setup component on created.\n   */\n  onCreated() {\n    super.onCreated();\n    this.index.getComponentMethods(this.name).paginate(1);\n  }\n\n  /**\n   * Get pages for displaying the pagination.\n   *\n   * @returns {Array}\n   */\n  page() {\n    let totalCount = this.dict.get('count'),\n      pageCount = this.dict.get('limit'),\n      currentPage = this.dict.get('currentPage'),\n      maxPages = this.options.maxPages,\n      prevAndNext = this.options.prevAndNext;\n\n    if (!pageCount || !totalCount) {\n      return [];\n    }\n\n    return this.options.transformPages(\n      EasySearch._getPagesForPagination(\n        {\n          totalCount,\n          pageCount,\n          currentPage,\n          maxPages,\n          prevAndNext\n        }\n    ));\n  }\n\n  customRenderPagination() {\n    return this.getData().customRenderPagination;\n  }\n\n  /**\n   * Paginate documents.\n   */\n  paginate(page) {\n    check(page, Number);\n\n    this.index.getComponentMethods(this.name).paginate(page);\n  }\n\n  /**\n   * Return page classes.\n   *\n   * @param {Object} data Data for the current page\n   *\n   * @returns {String}\n   */\n  pageClasses(data) {\n    return `${(data.disabled ? 'disabled' : '' )} ${(data.current ? 'current' : '' )}`.trim();\n  }\n\n  /**\n   * Return true if there are more documents to load.\n   *\n   * @returns {Boolean}\n   */\n  moreDocuments() {\n    return this.index.getComponentMethods(this.name).hasMoreDocuments();\n  }\n\n  /**\n   * Event map.\n   *\n   * @returns {Object}\n   */\n  events() {\n    return [{\n      'click .page:not(.disabled)' : function (e) {\n        let currentPage = this.currentData().page;\n        this.dict.set('currentPage', currentPage);\n        this.paginate(currentPage);\n\n        e.preventDefault();\n      }\n    }];\n  }\n\n  /**\n   * Return the default options.\n   *\n   * @returns {Object}\n   */\n  get defaultOptions() {\n    return {\n      prevAndNext: true,\n      maxPages: null,\n      transformPages: (pages) => pages\n    };\n  }\n};\n\nEasySearch.PaginationComponent.register('EasySearch.Pagination');\n","const {\n  Index,\n  SingleIndexComponent,\n  BaseComponent,\n  FieldInputComponent,\n  EachComponent,\n  IfInputEmptyComponent,\n  IfNoResultsComponent,\n  IfSearchingComponent,\n  InputComponent,\n  LoadMoreComponent,\n  PaginationComponent,\n} = EasySearch;\n\nexport {\n  Index,\n  SingleIndexComponent,\n  BaseComponent,\n  FieldInputComponent,\n  EachComponent,\n  IfInputEmptyComponent,\n  IfNoResultsComponent,\n  IfSearchingComponent,\n  InputComponent,\n  LoadMoreComponent,\n  PaginationComponent,\n};\n"]}}]